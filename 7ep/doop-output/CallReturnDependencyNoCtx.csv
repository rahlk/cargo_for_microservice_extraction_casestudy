<com.coveros.training.mathematics.TailRecursive: java.lang.Object lambda$tailie$0(java.util.function.BiFunction,java.util.function.UnaryOperator,java.util.function.Predicate,java.util.function.Function,java.lang.Object,java.lang.Object)>	<com.coveros.training.mathematics.TailRecursive$$: java.lang.Object epsilon(java.util.stream.Stream,java.util.function.Predicate,java.util.function.Function)>	java.util.function.Function
<com.coveros.training.mathematics.TailRecursive: java.lang.Object lambda$tailie$0(java.util.function.BiFunction,java.util.function.UnaryOperator,java.util.function.Predicate,java.util.function.Function,java.lang.Object,java.lang.Object)>	<com.coveros.training.mathematics.TailRecursive$$: java.lang.Object epsilon(java.util.stream.Stream,java.util.function.Predicate,java.util.function.Function)>	java.util.function.Predicate
<com.coveros.training.mathematics.TailRecursive: java.lang.Object lambda$tailie$0(java.util.function.BiFunction,java.util.function.UnaryOperator,java.util.function.Predicate,java.util.function.Function,java.lang.Object,java.lang.Object)>	<com.coveros.training.mathematics.TailRecursive$$: java.lang.Object epsilon(java.util.stream.Stream,java.util.function.Predicate,java.util.function.Function)>	java.util.stream.Stream
<com.coveros.training.library.LibraryLendServlet: void doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>	<com.coveros.training.library.LibraryUtils: com.coveros.training.library.domainobjects.LibraryActionResults lendBook(java.lang.String,java.lang.String,java.sql.Date)>	java.sql.Date
<com.coveros.training.mathematics.Calculator: int calculateAndMore(int,int,com.coveros.training.mathematics.Calculator$iFoo,com.coveros.training.mathematics.Calculator$iBar)>	<com.coveros.training.mathematics.Calculator$iFoo: int doComplexThing(int)>	int
<com.coveros.training.mathematics.Calculator: int calculateAndMore(int,int,com.coveros.training.mathematics.Calculator$iFoo,com.coveros.training.mathematics.Calculator$iBar)>	<com.coveros.training.mathematics.Calculator$iBar: int doOtherComplexThing(int)>	int
<com.coveros.training.mathematics.Calculator: int calculateAndMorePart2(int)>	<com.coveros.training.mathematics.Calculator$Baz: int doThirdPartyThing(int)>	int
<com.coveros.training.persistence.PersistenceLayer: void executeUpdateTemplate(java.lang.String,java.lang.String,java.lang.Object[])>	<com.coveros.training.persistence.PersistenceLayer: java.sql.PreparedStatement prepareStatementWithKeys(com.coveros.training.persistence.SqlData,java.sql.Connection)>	com.coveros.training.persistence.SqlData
<com.coveros.training.persistence.PersistenceLayer: void executeUpdateTemplate(java.lang.String,java.lang.String,java.lang.Object[])>	<com.coveros.training.persistence.PersistenceLayer: java.sql.PreparedStatement prepareStatementWithKeys(com.coveros.training.persistence.SqlData,java.sql.Connection)>	java.sql.Connection
<com.coveros.training.persistence.PersistenceLayer: long executeInsertTemplate(java.lang.String,java.lang.String,java.lang.Object[])>	<com.coveros.training.persistence.PersistenceLayer: long executeInsertOnPreparedStatement(com.coveros.training.persistence.SqlData,java.sql.PreparedStatement)>	com.coveros.training.persistence.SqlData
<com.coveros.training.persistence.PersistenceLayer: long executeInsertTemplate(java.lang.String,java.lang.String,java.lang.Object[])>	<com.coveros.training.persistence.PersistenceLayer: long executeInsertOnPreparedStatement(com.coveros.training.persistence.SqlData,java.sql.PreparedStatement)>	java.sql.PreparedStatement
<com.coveros.training.persistence.PersistenceLayer: long executeInsertTemplate(java.lang.String,java.lang.String,java.lang.Object[])>	<com.coveros.training.persistence.PersistenceLayer: java.sql.PreparedStatement prepareStatementWithKeys(com.coveros.training.persistence.SqlData,java.sql.Connection)>	com.coveros.training.persistence.SqlData
<com.coveros.training.persistence.PersistenceLayer: long executeInsertTemplate(java.lang.String,java.lang.String,java.lang.Object[])>	<com.coveros.training.persistence.PersistenceLayer: java.sql.PreparedStatement prepareStatementWithKeys(com.coveros.training.persistence.SqlData,java.sql.Connection)>	java.sql.Connection
<com.coveros.training.persistence.PersistenceLayer: java.util.function.Function createExtractor(com.coveros.training.persistence.PersistenceLayer$ThrowingFunction)>	<com.coveros.training.persistence.PersistenceLayer: java.util.function.Function throwingFunctionWrapper(com.coveros.training.persistence.PersistenceLayer$ThrowingFunction)>	com.coveros.training.persistence.PersistenceLayer$ThrowingFunction
<com.coveros.training.persistence.PersistenceLayer: java.util.Optional getBorrowerName(long)>	<com.coveros.training.persistence.PersistenceLayer: java.util.Optional runQuery(com.coveros.training.persistence.SqlData)>	com.coveros.training.persistence.SqlData
<com.coveros.training.persistence.PersistenceLayer: java.util.Optional getBorrowerName(long)>	<com.coveros.training.persistence.PersistenceLayer: java.util.function.Function createExtractor(com.coveros.training.persistence.PersistenceLayer$ThrowingFunction)>	com.coveros.training.persistence.PersistenceLayer$ThrowingFunction
<com.coveros.training.persistence.PersistenceLayer: java.util.Optional searchBorrowerDataByName(java.lang.String)>	<com.coveros.training.persistence.PersistenceLayer: java.util.Optional runQuery(com.coveros.training.persistence.SqlData)>	com.coveros.training.persistence.SqlData
<com.coveros.training.persistence.PersistenceLayer: java.util.Optional searchBorrowerDataByName(java.lang.String)>	<com.coveros.training.persistence.PersistenceLayer: java.util.function.Function createExtractor(com.coveros.training.persistence.PersistenceLayer$ThrowingFunction)>	com.coveros.training.persistence.PersistenceLayer$ThrowingFunction
<com.coveros.training.persistence.PersistenceLayer: java.util.Optional searchBooksByTitle(java.lang.String)>	<com.coveros.training.persistence.PersistenceLayer: java.util.Optional runQuery(com.coveros.training.persistence.SqlData)>	com.coveros.training.persistence.SqlData
<com.coveros.training.persistence.PersistenceLayer: java.util.Optional searchBooksByTitle(java.lang.String)>	<com.coveros.training.persistence.PersistenceLayer: java.util.function.Function createExtractor(com.coveros.training.persistence.PersistenceLayer$ThrowingFunction)>	com.coveros.training.persistence.PersistenceLayer$ThrowingFunction
<com.coveros.training.persistence.PersistenceLayer: java.util.Optional searchBooksById(long)>	<com.coveros.training.persistence.PersistenceLayer: java.util.Optional runQuery(com.coveros.training.persistence.SqlData)>	com.coveros.training.persistence.SqlData
<com.coveros.training.persistence.PersistenceLayer: java.util.Optional searchBooksById(long)>	<com.coveros.training.persistence.PersistenceLayer: java.util.function.Function createExtractor(com.coveros.training.persistence.PersistenceLayer$ThrowingFunction)>	com.coveros.training.persistence.PersistenceLayer$ThrowingFunction
<com.coveros.training.persistence.PersistenceLayer: java.util.Optional searchBorrowersById(long)>	<com.coveros.training.persistence.PersistenceLayer: java.util.Optional runQuery(com.coveros.training.persistence.SqlData)>	com.coveros.training.persistence.SqlData
<com.coveros.training.persistence.PersistenceLayer: java.util.Optional searchBorrowersById(long)>	<com.coveros.training.persistence.PersistenceLayer: java.util.function.Function createExtractor(com.coveros.training.persistence.PersistenceLayer$ThrowingFunction)>	com.coveros.training.persistence.PersistenceLayer$ThrowingFunction
<com.coveros.training.persistence.PersistenceLayer: java.util.Optional listBooks(java.lang.String,java.lang.String)>	<com.coveros.training.persistence.PersistenceLayer: java.util.Optional runQuery(com.coveros.training.persistence.SqlData)>	com.coveros.training.persistence.SqlData
<com.coveros.training.persistence.PersistenceLayer: java.util.Optional listBooks(java.lang.String,java.lang.String)>	<com.coveros.training.persistence.PersistenceLayer: java.util.function.Function createExtractor(com.coveros.training.persistence.PersistenceLayer$ThrowingFunction)>	com.coveros.training.persistence.PersistenceLayer$ThrowingFunction
<com.coveros.training.persistence.PersistenceLayer: java.util.Optional searchForLoanByBorrower(com.coveros.training.library.domainobjects.Borrower)>	<com.coveros.training.persistence.PersistenceLayer: java.util.Optional runQuery(com.coveros.training.persistence.SqlData)>	com.coveros.training.persistence.SqlData
<com.coveros.training.persistence.PersistenceLayer: java.util.Optional searchForLoanByBorrower(com.coveros.training.library.domainobjects.Borrower)>	<com.coveros.training.persistence.PersistenceLayer: java.util.function.Function createExtractor(com.coveros.training.persistence.PersistenceLayer$ThrowingFunction)>	com.coveros.training.persistence.PersistenceLayer$ThrowingFunction
<com.coveros.training.persistence.PersistenceLayer: java.util.Optional searchForLoanByBook(com.coveros.training.library.domainobjects.Book)>	<com.coveros.training.persistence.PersistenceLayer: java.util.Optional runQuery(com.coveros.training.persistence.SqlData)>	com.coveros.training.persistence.SqlData
<com.coveros.training.persistence.PersistenceLayer: java.util.Optional searchForLoanByBook(com.coveros.training.library.domainobjects.Book)>	<com.coveros.training.persistence.PersistenceLayer: java.util.function.Function createExtractor(com.coveros.training.persistence.PersistenceLayer$ThrowingFunction)>	com.coveros.training.persistence.PersistenceLayer$ThrowingFunction
<com.coveros.training.persistence.PersistenceLayer: java.util.Optional searchForUserByName(java.lang.String)>	<com.coveros.training.persistence.PersistenceLayer: java.util.Optional runQuery(com.coveros.training.persistence.SqlData)>	com.coveros.training.persistence.SqlData
<com.coveros.training.persistence.PersistenceLayer: java.util.Optional searchForUserByName(java.lang.String)>	<com.coveros.training.persistence.PersistenceLayer: java.util.function.Function createExtractor(com.coveros.training.persistence.PersistenceLayer$ThrowingFunction)>	com.coveros.training.persistence.PersistenceLayer$ThrowingFunction
<com.coveros.training.persistence.PersistenceLayer: java.util.Optional areCredentialsValid(java.lang.String,java.lang.String)>	<com.coveros.training.persistence.PersistenceLayer: java.util.Optional runQuery(com.coveros.training.persistence.SqlData)>	com.coveros.training.persistence.SqlData
<com.coveros.training.persistence.PersistenceLayer: java.util.Optional areCredentialsValid(java.lang.String,java.lang.String)>	<com.coveros.training.persistence.PersistenceLayer: java.util.function.Function createExtractor(com.coveros.training.persistence.PersistenceLayer$ThrowingFunction)>	com.coveros.training.persistence.PersistenceLayer$ThrowingFunction
<com.coveros.training.persistence.PersistenceLayer: java.lang.String createHashedValueFromPassword(java.lang.String)>	<com.coveros.training.persistence.PersistenceLayer: java.lang.String bytesToHex(byte[])>	byte[]
<com.coveros.training.persistence.PersistenceLayer: java.util.Optional lambda$createExtractor$1(com.coveros.training.persistence.PersistenceLayer$ThrowingFunction,java.sql.ResultSet)>	<com.coveros.training.persistence.PersistenceLayer$ThrowingFunction: java.lang.Object apply(java.sql.ResultSet)>	java.sql.ResultSet
<com.coveros.training.persistence.PersistenceLayer: java.lang.Object lambda$throwingFunctionWrapper$0(com.coveros.training.persistence.PersistenceLayer$ThrowingFunction,java.sql.ResultSet)>	<com.coveros.training.persistence.PersistenceLayer$ThrowingFunction: java.lang.Object apply(java.sql.ResultSet)>	java.sql.ResultSet
<com.coveros.training.mathematics.MathServlet: void doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>	<com.coveros.training.mathematics.MathServlet: int putNumberInRequest(java.lang.String,javax.servlet.http.HttpServletRequest)>	javax.servlet.http.HttpServletRequest
<com.coveros.training.mathematics.MathServlet: void setResultToSum(javax.servlet.http.HttpServletRequest,int,int)>	<com.coveros.training.mathematics.Calculator: int add(int,int)>	int
<com.coveros.training.library.LibraryBorrowerListSearchServlet: java.lang.String searchById(java.lang.String)>	<com.coveros.training.library.LibraryUtils: com.coveros.training.library.domainobjects.Borrower searchForBorrowerById(long)>	long
<com.coveros.training.mathematics.AckermannIterative$$: com.coveros.training.mathematics.AckermannIterative lambda$static$2(com.coveros.training.mathematics.AckermannIterative)>	<com.coveros.training.mathematics.AckermannIterative$$: com.coveros.training.mathematics.AckermannIterative tail(java.math.BigInteger,java.math.BigInteger,java.util.Deque,boolean)>	boolean
<com.coveros.training.mathematics.AckermannIterative$$: com.coveros.training.mathematics.AckermannIterative lambda$static$2(com.coveros.training.mathematics.AckermannIterative)>	<com.coveros.training.mathematics.AckermannIterative$$: com.coveros.training.mathematics.AckermannIterative tail(java.math.BigInteger,java.math.BigInteger,java.util.Deque,boolean)>	java.math.BigInteger
<com.coveros.training.mathematics.AckermannIterative$$: com.coveros.training.mathematics.AckermannIterative lambda$static$2(com.coveros.training.mathematics.AckermannIterative)>	<com.coveros.training.mathematics.AckermannIterative$$: com.coveros.training.mathematics.AckermannIterative tail(java.math.BigInteger,java.math.BigInteger,java.util.Deque,boolean)>	java.util.Deque
<com.coveros.training.mathematics.AckermannIterative$$: com.coveros.training.mathematics.AckermannIterative lambda$static$1(java.math.BigInteger,java.math.BigInteger)>	<com.coveros.training.mathematics.AckermannIterative$$: com.coveros.training.mathematics.AckermannIterative tail(java.math.BigInteger,java.math.BigInteger,java.util.Deque,boolean)>	boolean
<com.coveros.training.mathematics.AckermannIterative$$: com.coveros.training.mathematics.AckermannIterative lambda$static$1(java.math.BigInteger,java.math.BigInteger)>	<com.coveros.training.mathematics.AckermannIterative$$: com.coveros.training.mathematics.AckermannIterative tail(java.math.BigInteger,java.math.BigInteger,java.util.Deque,boolean)>	java.math.BigInteger
<com.coveros.training.mathematics.AckermannIterative$$: com.coveros.training.mathematics.AckermannIterative lambda$static$1(java.math.BigInteger,java.math.BigInteger)>	<com.coveros.training.mathematics.AckermannIterative$$: com.coveros.training.mathematics.AckermannIterative tail(java.math.BigInteger,java.math.BigInteger,java.util.Deque,boolean)>	java.util.Deque
<com.coveros.training.mathematics.AckServlet: void doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>	<com.coveros.training.mathematics.AckServlet: int putNumberInRequest(java.lang.String,javax.servlet.http.HttpServletRequest)>	javax.servlet.http.HttpServletRequest
<com.coveros.training.mathematics.AckServlet: void regularRecursive(javax.servlet.http.HttpServletRequest,int,int)>	<com.coveros.training.mathematics.Ackermann: java.math.BigInteger calculate(int,int)>	int
<com.coveros.training.mathematics.AckServlet: void tailRecursive(javax.servlet.http.HttpServletRequest,int,int)>	<com.coveros.training.mathematics.AckermannIterative: java.math.BigInteger calculate(int,int)>	int
<com.coveros.training.mathematics.Ackermann: java.math.BigInteger ack(java.math.BigInteger,java.math.BigInteger)>	<com.coveros.training.mathematics.Ackermann: java.math.BigInteger ack(java.math.BigInteger,java.math.BigInteger)>	java.math.BigInteger
<com.coveros.training.mathematics.Ackermann: java.math.BigInteger calculate(int,int)>	<com.coveros.training.mathematics.Ackermann: java.math.BigInteger ack(java.math.BigInteger,java.math.BigInteger)>	java.math.BigInteger
<com.coveros.training.mathematics.FibServlet: void doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>	<com.coveros.training.mathematics.FibServlet: int putNumberInRequest(java.lang.String,javax.servlet.http.HttpServletRequest)>	javax.servlet.http.HttpServletRequest
<com.coveros.training.mathematics.FibServlet: void tailRecursiveAlgo2Calc(javax.servlet.http.HttpServletRequest,int)>	<com.coveros.training.mathematics.FibonacciIterative: java.math.BigInteger fibAlgo2(int)>	int
<com.coveros.training.mathematics.FibServlet: void tailRecursiveAlgo1Calc(javax.servlet.http.HttpServletRequest,int)>	<com.coveros.training.mathematics.FibonacciIterative: java.math.BigInteger fibAlgo1(long)>	long
<com.coveros.training.mathematics.FibServlet: void defaultRecursiveCalculation(javax.servlet.http.HttpServletRequest,int)>	<com.coveros.training.mathematics.Fibonacci: long calculate(long)>	long
<com.coveros.training.authentication.RegistrationUtils: com.coveros.training.authentication.domainobjects.PasswordResult isPasswordGood(java.lang.String)>	<com.coveros.training.authentication.domainobjects.PasswordResult: com.coveros.training.authentication.domainobjects.PasswordResult createDefault(com.coveros.training.authentication.domainobjects.PasswordResultEnums)>	com.coveros.training.authentication.domainobjects.PasswordResultEnums
<com.coveros.training.library.LibraryUtils: com.coveros.training.library.domainobjects.LibraryActionResults lendBook(java.lang.String,java.lang.String,java.sql.Date)>	<com.coveros.training.library.LibraryUtils: com.coveros.training.library.domainobjects.LibraryActionResults lendBook(com.coveros.training.library.domainobjects.Book,com.coveros.training.library.domainobjects.Borrower,java.sql.Date)>	java.sql.Date
<com.coveros.training.library.LibraryUtils: com.coveros.training.library.domainobjects.LibraryActionResults lendBook(java.lang.String,java.lang.String,java.sql.Date)>	<com.coveros.training.library.LibraryUtils: com.coveros.training.library.domainobjects.LibraryActionResults lendBook(com.coveros.training.library.domainobjects.Book,com.coveros.training.library.domainobjects.Borrower,java.sql.Date)>	com.coveros.training.library.domainobjects.Book
<com.coveros.training.library.LibraryUtils: com.coveros.training.library.domainobjects.LibraryActionResults lendBook(java.lang.String,java.lang.String,java.sql.Date)>	<com.coveros.training.library.LibraryUtils: com.coveros.training.library.domainobjects.LibraryActionResults lendBook(com.coveros.training.library.domainobjects.Book,com.coveros.training.library.domainobjects.Borrower,java.sql.Date)>	com.coveros.training.library.domainobjects.Borrower
<com.coveros.training.library.LibraryUtils: com.coveros.training.library.domainobjects.LibraryActionResults lendBook(com.coveros.training.library.domainobjects.Book,com.coveros.training.library.domainobjects.Borrower,java.sql.Date)>	<com.coveros.training.library.LibraryUtils: com.coveros.training.library.domainobjects.Loan searchForLoanByBook(com.coveros.training.library.domainobjects.Book)>	com.coveros.training.library.domainobjects.Book
<com.coveros.training.library.LibraryUtils: com.coveros.training.library.domainobjects.Loan searchForLoanByBook(com.coveros.training.library.domainobjects.Book)>	<com.coveros.training.persistence.IPersistenceLayer: java.util.Optional searchForLoanByBook(com.coveros.training.library.domainobjects.Book)>	com.coveros.training.library.domainobjects.Book
<com.coveros.training.library.LibraryUtils: java.util.List searchForLoanByBorrower(com.coveros.training.library.domainobjects.Borrower)>	<com.coveros.training.persistence.IPersistenceLayer: java.util.Optional searchForLoanByBorrower(com.coveros.training.library.domainobjects.Borrower)>	com.coveros.training.library.domainobjects.Borrower
<com.coveros.training.library.LibraryUtils: com.coveros.training.library.domainobjects.Book searchForBookById(long)>	<com.coveros.training.persistence.IPersistenceLayer: java.util.Optional searchBooksById(long)>	long
<com.coveros.training.library.LibraryUtils: com.coveros.training.library.domainobjects.Borrower searchForBorrowerById(long)>	<com.coveros.training.persistence.IPersistenceLayer: java.util.Optional searchBorrowersById(long)>	long
<com.coveros.training.library.LibraryBookListSearchServlet: java.lang.String searchById(java.lang.String)>	<com.coveros.training.library.LibraryUtils: com.coveros.training.library.domainobjects.Book searchForBookById(long)>	long
<com.coveros.training.mathematics.Fibonacci: long calculate(long)>	<com.coveros.training.mathematics.Fibonacci: long calculate(long)>	long
<com.coveros.training.mathematics.AckermannIterative: java.math.BigInteger calculate(int,int)>	<com.coveros.training.mathematics.AckermannIterative$$: java.math.BigInteger main(java.math.BigInteger,java.math.BigInteger)>	java.math.BigInteger
<com.coveros.training.persistence.PersistenceLayer: java.util.Optional listAllBorrowers()>	<com.coveros.training.persistence.PersistenceLayer: java.util.Optional runQuery(com.coveros.training.persistence.SqlData)>	com.coveros.training.persistence.SqlData
<com.coveros.training.persistence.PersistenceLayer: java.util.Optional listAllBorrowers()>	<com.coveros.training.persistence.PersistenceLayer: java.util.function.Function createExtractor(com.coveros.training.persistence.PersistenceLayer$ThrowingFunction)>	com.coveros.training.persistence.PersistenceLayer$ThrowingFunction
<com.coveros.training.mathematics.AckermannIterative$$: void <clinit>()>	<com.coveros.training.mathematics.TailRecursive: java.util.function.BiFunction tailie(java.util.function.BiFunction,java.util.function.UnaryOperator,java.util.function.Predicate,java.util.function.Function)>	java.util.function.Function
<com.coveros.training.mathematics.AckermannIterative$$: void <clinit>()>	<com.coveros.training.mathematics.TailRecursive: java.util.function.BiFunction tailie(java.util.function.BiFunction,java.util.function.UnaryOperator,java.util.function.Predicate,java.util.function.Function)>	java.util.function.BiFunction
<com.coveros.training.mathematics.AckermannIterative$$: void <clinit>()>	<com.coveros.training.mathematics.TailRecursive: java.util.function.BiFunction tailie(java.util.function.BiFunction,java.util.function.UnaryOperator,java.util.function.Predicate,java.util.function.Function)>	java.util.function.UnaryOperator
<com.coveros.training.mathematics.AckermannIterative$$: void <clinit>()>	<com.coveros.training.mathematics.TailRecursive: java.util.function.BiFunction tailie(java.util.function.BiFunction,java.util.function.UnaryOperator,java.util.function.Predicate,java.util.function.Function)>	java.util.function.Predicate
