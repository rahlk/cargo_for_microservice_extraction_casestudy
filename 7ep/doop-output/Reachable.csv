<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>
<java.lang.ThreadGroup: void <init>()>
<java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>
<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>
<com.coveros.training.library.domainobjects.Loan: void <init>(com.coveros.training.library.domainobjects.Book,com.coveros.training.library.domainobjects.Borrower,long,java.sql.Date)>
<com.coveros.training.mathematics.TailRecursive: java.util.function.BiFunction tailie(java.util.function.BiFunction,java.util.function.UnaryOperator,java.util.function.Predicate,java.util.function.Function)>
<com.coveros.training.authentication.domainobjects.PasswordResult: void <init>(com.coveros.training.authentication.domainobjects.PasswordResultEnums,java.lang.Double,java.lang.String,java.lang.String,java.lang.String)>
<com.coveros.training.authentication.domainobjects.PasswordResult: com.coveros.training.authentication.domainobjects.PasswordResult createDefault(com.coveros.training.authentication.domainobjects.PasswordResultEnums)>
<com.coveros.training.library.LibraryLendServlet: void doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.coveros.training.tomcat.WebAppListener: void <init>(com.coveros.training.persistence.IPersistenceLayer)>
<com.coveros.training.tomcat.WebAppListener: void contextInitialized(javax.servlet.ServletContextEvent)>
<com.coveros.training.tomcat.WebAppListener: void contextDestroyed(javax.servlet.ServletContextEvent)>
<com.coveros.training.library.LibraryRegisterBookServlet: void doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.coveros.training.mathematics.Calculator: int add(int,int)>
<com.coveros.training.persistence.PersistenceLayer: void <init>(javax.sql.DataSource)>
<com.coveros.training.persistence.PersistenceLayer: void executeUpdateTemplate(java.lang.String,java.lang.String,java.lang.Object[])>
<com.coveros.training.persistence.PersistenceLayer: long executeInsertTemplate(java.lang.String,java.lang.String,java.lang.Object[])>
<com.coveros.training.persistence.PersistenceLayer: long executeInsertOnPreparedStatement(com.coveros.training.persistence.SqlData,java.sql.PreparedStatement)>
<com.coveros.training.persistence.PersistenceLayer: void executeUpdateOnPreparedStatement(com.coveros.training.persistence.SqlData,java.sql.PreparedStatement)>
<com.coveros.training.persistence.PersistenceLayer: java.sql.PreparedStatement prepareStatementWithKeys(com.coveros.training.persistence.SqlData,java.sql.Connection)>
<com.coveros.training.persistence.PersistenceLayer: java.util.Optional runQuery(com.coveros.training.persistence.SqlData)>
<com.coveros.training.persistence.PersistenceLayer: java.util.function.Function throwingFunctionWrapper(com.coveros.training.persistence.PersistenceLayer$ThrowingFunction)>
<com.coveros.training.persistence.PersistenceLayer: java.util.function.Function createExtractor(com.coveros.training.persistence.PersistenceLayer$ThrowingFunction)>
<com.coveros.training.persistence.PersistenceLayer: long saveNewBorrower(java.lang.String)>
<com.coveros.training.persistence.PersistenceLayer: long createLoan(com.coveros.training.library.domainobjects.Book,com.coveros.training.library.domainobjects.Borrower,java.sql.Date)>
<com.coveros.training.persistence.PersistenceLayer: long saveNewBook(java.lang.String)>
<com.coveros.training.persistence.PersistenceLayer: java.util.Optional searchBorrowerDataByName(java.lang.String)>
<com.coveros.training.persistence.PersistenceLayer: java.util.Optional searchBooksByTitle(java.lang.String)>
<com.coveros.training.persistence.PersistenceLayer: java.util.Optional searchBooksById(long)>
<com.coveros.training.persistence.PersistenceLayer: java.util.Optional searchBorrowersById(long)>
<com.coveros.training.persistence.PersistenceLayer: java.util.Optional listBooks(java.lang.String,java.lang.String)>
<com.coveros.training.persistence.PersistenceLayer: java.util.Optional searchForLoanByBook(com.coveros.training.library.domainobjects.Book)>
<com.coveros.training.persistence.PersistenceLayer: long saveNewUser(java.lang.String)>
<com.coveros.training.persistence.PersistenceLayer: java.util.Optional searchForUserByName(java.lang.String)>
<com.coveros.training.persistence.PersistenceLayer: java.util.Optional areCredentialsValid(java.lang.String,java.lang.String)>
<com.coveros.training.persistence.PersistenceLayer: void updateUserWithPassword(long,java.lang.String)>
<com.coveros.training.persistence.PersistenceLayer: java.lang.String createHashedValueFromPassword(java.lang.String)>
<com.coveros.training.persistence.PersistenceLayer: java.lang.String bytesToHex(byte[])>
<com.coveros.training.mathematics.FibonacciIterative: java.math.BigInteger fibAlgo1(long)>
<com.coveros.training.mathematics.FibonacciIterative: java.math.BigInteger fibAlgo2(int)>
<com.coveros.training.authentication.domainobjects.RegistrationStatusEnums: void <init>(java.lang.String,int)>
<com.coveros.training.authentication.domainobjects.PasswordResultEnums: void <init>(java.lang.String,int)>
<com.coveros.training.mathematics.MathServlet: int putNumberInRequest(java.lang.String,javax.servlet.http.HttpServletRequest)>
<com.coveros.training.mathematics.MathServlet: void doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.coveros.training.mathematics.MathServlet: void forwardToResult(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.slf4j.Logger)>
<com.coveros.training.mathematics.MathServlet: void setResultToSum(javax.servlet.http.HttpServletRequest,int,int)>
<com.coveros.training.helpers.ServletUtils: void forwardToResult(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.slf4j.Logger)>
<com.coveros.training.helpers.ServletUtils: void forwardToRestfulResult(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.slf4j.Logger)>
<com.coveros.training.helpers.AssertionException: void <init>(java.lang.String)>
<com.coveros.training.helpers.CheckUtils: void IntParameterMustBePositive(long)>
<com.coveros.training.helpers.CheckUtils: void StringMustNotBeNullOrEmpty(java.lang.String[])>
<com.coveros.training.helpers.CheckUtils: void mustBeTrueAtThisPoint(boolean,java.lang.String)>
<com.coveros.training.library.LibraryBorrowerListSearchServlet: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.coveros.training.library.LibraryBorrowerListSearchServlet: java.lang.String searchByName(java.lang.String)>
<com.coveros.training.library.LibraryBorrowerListSearchServlet: java.lang.String searchById(java.lang.String)>
<com.coveros.training.mathematics.AckermannIterative$$: void <init>(java.lang.String,int)>
<com.coveros.training.mathematics.AckermannIterative$$: java.math.BigInteger main(java.math.BigInteger,java.math.BigInteger)>
<com.coveros.training.mathematics.AckServlet: int putNumberInRequest(java.lang.String,javax.servlet.http.HttpServletRequest)>
<com.coveros.training.mathematics.AckServlet: void doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.coveros.training.mathematics.AckServlet: void forwardToResult(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.slf4j.Logger)>
<com.coveros.training.mathematics.AckServlet: void regularRecursive(javax.servlet.http.HttpServletRequest,int,int)>
<com.coveros.training.mathematics.AckServlet: void tailRecursive(javax.servlet.http.HttpServletRequest,int,int)>
<com.coveros.training.library.LibraryRegisterBorrowerServlet: void doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.coveros.training.mathematics.Ackermann: java.math.BigInteger ack(java.math.BigInteger,java.math.BigInteger)>
<com.coveros.training.mathematics.Ackermann: java.math.BigInteger calculate(int,int)>
<com.coveros.training.library.LibraryBookListAvailableServlet: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.coveros.training.mathematics.FibServlet: int putNumberInRequest(java.lang.String,javax.servlet.http.HttpServletRequest)>
<com.coveros.training.mathematics.FibServlet: void doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.coveros.training.mathematics.FibServlet: void tailRecursiveAlgo2Calc(javax.servlet.http.HttpServletRequest,int)>
<com.coveros.training.mathematics.FibServlet: void tailRecursiveAlgo1Calc(javax.servlet.http.HttpServletRequest,int)>
<com.coveros.training.mathematics.FibServlet: void forwardToResult(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.slf4j.Logger)>
<com.coveros.training.mathematics.FibServlet: void defaultRecursiveCalculation(javax.servlet.http.HttpServletRequest,int)>
<com.coveros.training.authentication.RegistrationUtils: void <init>(com.coveros.training.persistence.IPersistenceLayer)>
<com.coveros.training.authentication.RegistrationUtils: com.coveros.training.authentication.domainobjects.RegistrationResult processRegistration(java.lang.String,java.lang.String)>
<com.coveros.training.authentication.RegistrationUtils: com.coveros.training.authentication.domainobjects.PasswordResult isPasswordGood(java.lang.String)>
<com.coveros.training.authentication.RegistrationUtils: boolean isUserInDatabase(java.lang.String)>
<com.coveros.training.authentication.RegistrationUtils: void saveToDatabase(java.lang.String,java.lang.String)>
<com.coveros.training.persistence.SqlData: void <init>(java.lang.String,java.lang.String,java.lang.Object[])>
<com.coveros.training.persistence.SqlData: void <init>(java.lang.String,java.lang.String,java.util.function.Function,java.lang.Object[])>
<com.coveros.training.persistence.SqlData: void generateParams(java.lang.Object[])>
<com.coveros.training.persistence.SqlData: void addParameter(java.lang.Object,java.lang.Class)>
<com.coveros.training.persistence.SqlData: void applyParametersToPreparedStatement(java.sql.PreparedStatement)>
<com.coveros.training.authentication.LoginUtils: void <init>(com.coveros.training.persistence.IPersistenceLayer)>
<com.coveros.training.authentication.LoginUtils: boolean isUserRegistered(java.lang.String,java.lang.String)>
<com.coveros.training.authentication.LoginServlet: void doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.coveros.training.authentication.RegisterServlet: void doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.coveros.training.authentication.RegisterServlet: void forwardToResult(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.slf4j.Logger)>
<com.coveros.training.library.domainobjects.Book: void <init>(long,java.lang.String)>
<com.coveros.training.library.LibraryUtils: void <init>(com.coveros.training.persistence.IPersistenceLayer)>
<com.coveros.training.library.LibraryUtils: com.coveros.training.library.domainobjects.LibraryActionResults lendBook(java.lang.String,java.lang.String,java.sql.Date)>
<com.coveros.training.library.LibraryUtils: com.coveros.training.library.domainobjects.LibraryActionResults lendBook(com.coveros.training.library.domainobjects.Book,com.coveros.training.library.domainobjects.Borrower,java.sql.Date)>
<com.coveros.training.library.LibraryUtils: void createLoan(com.coveros.training.library.domainobjects.Book,com.coveros.training.library.domainobjects.Borrower,java.sql.Date)>
<com.coveros.training.library.LibraryUtils: com.coveros.training.library.domainobjects.LibraryActionResults registerBorrower(java.lang.String)>
<com.coveros.training.library.LibraryUtils: void saveNewBorrower(java.lang.String)>
<com.coveros.training.library.LibraryUtils: com.coveros.training.library.domainobjects.LibraryActionResults registerBook(java.lang.String)>
<com.coveros.training.library.LibraryUtils: void saveNewBook(java.lang.String)>
<com.coveros.training.library.LibraryUtils: com.coveros.training.library.domainobjects.Loan searchForLoanByBook(com.coveros.training.library.domainobjects.Book)>
<com.coveros.training.library.LibraryUtils: com.coveros.training.library.domainobjects.Borrower searchForBorrowerByName(java.lang.String)>
<com.coveros.training.library.LibraryUtils: com.coveros.training.library.domainobjects.Book searchForBookByTitle(java.lang.String)>
<com.coveros.training.library.LibraryUtils: com.coveros.training.library.domainobjects.Book searchForBookById(long)>
<com.coveros.training.library.LibraryUtils: com.coveros.training.library.domainobjects.Borrower searchForBorrowerById(long)>
<com.coveros.training.persistence.DbServlet: void <init>(com.coveros.training.persistence.IPersistenceLayer)>
<com.coveros.training.persistence.DbServlet: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.coveros.training.library.LibraryBookListSearchServlet: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.coveros.training.library.LibraryBookListSearchServlet: java.lang.String searchByTitle(java.lang.String)>
<com.coveros.training.library.LibraryBookListSearchServlet: java.lang.String searchById(java.lang.String)>
<com.coveros.training.mathematics.Fibonacci: long calculate(long)>
<com.coveros.training.library.domainobjects.LibraryActionResults: void <init>(java.lang.String,int)>
<com.coveros.training.library.domainobjects.Borrower: void <init>(long,java.lang.String)>
<com.coveros.training.persistence.SqlRuntimeException: void <init>(java.lang.Exception)>
<com.coveros.training.persistence.SqlRuntimeException: void <init>(java.lang.String)>
<com.coveros.training.mathematics.AckermannIterative: java.math.BigInteger calculate(int,int)>
<com.coveros.training.helpers.StringUtils: java.lang.String makeNotNullable(java.lang.String)>
<com.coveros.training.authentication.domainobjects.RegistrationResult: void <init>(boolean,com.coveros.training.authentication.domainobjects.RegistrationStatusEnums,java.lang.String)>
<com.coveros.training.authentication.domainobjects.RegistrationResult: void <init>(boolean,com.coveros.training.authentication.domainobjects.RegistrationStatusEnums)>
<com.coveros.training.persistence.ParameterObject: void <init>(java.lang.Object,java.lang.Class)>
<com.coveros.training.library.domainobjects.Loan: com.coveros.training.library.domainobjects.Loan createEmpty()>
<com.coveros.training.authentication.domainobjects.PasswordResult: java.lang.String toPrettyString()>
<com.coveros.training.library.LibraryLendServlet: void <init>()>
<com.coveros.training.library.LibraryLendServlet: java.sql.Date getDateNow()>
<com.coveros.training.library.LibraryLendServlet: void <clinit>()>
<com.coveros.training.tomcat.WebAppListener: void <init>()>
<com.coveros.training.library.LibraryRegisterBookServlet: void <init>()>
<com.coveros.training.library.LibraryRegisterBookServlet: void <clinit>()>
<com.coveros.training.persistence.PersistenceLayer: void <init>()>
<com.coveros.training.persistence.PersistenceLayer: org.h2.jdbcx.JdbcConnectionPool obtainConnectionPool()>
<com.coveros.training.persistence.PersistenceLayer: java.util.Optional listAllBooks()>
<com.coveros.training.persistence.PersistenceLayer: java.util.Optional listAvailableBooks()>
<com.coveros.training.persistence.PersistenceLayer: java.util.Optional listAllBorrowers()>
<com.coveros.training.persistence.PersistenceLayer: void cleanAndMigrateDatabase()>
<com.coveros.training.persistence.PersistenceLayer: void cleanDatabase()>
<com.coveros.training.persistence.PersistenceLayer: void migrateDatabase()>
<com.coveros.training.persistence.PersistenceLayer: org.flywaydb.core.Flyway configureFlyway()>
<com.coveros.training.persistence.PersistenceLayer: void <clinit>()>
<com.coveros.training.authentication.domainobjects.RegistrationStatusEnums: void <clinit>()>
<com.coveros.training.authentication.domainobjects.PasswordResultEnums: void <clinit>()>
<com.coveros.training.mathematics.MathServlet: void <init>()>
<com.coveros.training.mathematics.MathServlet: void <clinit>()>
<com.coveros.training.persistence.EmptyDataSource: void <init>()>
<com.coveros.training.library.LibraryBorrowerListSearchServlet: void <init>()>
<com.coveros.training.library.LibraryBorrowerListSearchServlet: java.lang.String listAllBorrowers()>
<com.coveros.training.library.LibraryBorrowerListSearchServlet: void <clinit>()>
<com.coveros.training.mathematics.AckermannIterative$$: void <clinit>()>
<com.coveros.training.mathematics.AckServlet: void <init>()>
<com.coveros.training.mathematics.AckServlet: void <clinit>()>
<com.coveros.training.library.LibraryRegisterBorrowerServlet: void <init>()>
<com.coveros.training.library.LibraryRegisterBorrowerServlet: void <clinit>()>
<com.coveros.training.library.LibraryBookListAvailableServlet: void <init>()>
<com.coveros.training.library.LibraryBookListAvailableServlet: void <clinit>()>
<com.coveros.training.mathematics.FibServlet: void <init>()>
<com.coveros.training.mathematics.FibServlet: void <clinit>()>
<com.coveros.training.authentication.RegistrationUtils: void <init>()>
<com.coveros.training.authentication.RegistrationUtils: void <clinit>()>
<com.coveros.training.authentication.LoginUtils: void <init>()>
<com.coveros.training.authentication.LoginUtils: void <clinit>()>
<com.coveros.training.authentication.LoginServlet: void <init>()>
<com.coveros.training.authentication.LoginServlet: void <clinit>()>
<com.coveros.training.authentication.RegisterServlet: void <init>()>
<com.coveros.training.authentication.RegisterServlet: void <clinit>()>
<com.coveros.training.library.domainobjects.Book: com.coveros.training.library.domainobjects.Book createEmpty()>
<com.coveros.training.library.LibraryUtils: void <init>()>
<com.coveros.training.library.LibraryUtils: java.util.List listAllBooks()>
<com.coveros.training.library.LibraryUtils: java.util.List listAllBorrowers()>
<com.coveros.training.library.LibraryUtils: java.util.List listAvailableBooks()>
<com.coveros.training.library.LibraryUtils: void <clinit>()>
<com.coveros.training.persistence.DbServlet: void <init>()>
<com.coveros.training.persistence.DbServlet: void <clinit>()>
<com.coveros.training.library.LibraryBookListSearchServlet: void <init>()>
<com.coveros.training.library.LibraryBookListSearchServlet: java.lang.String listAllBooks()>
<com.coveros.training.library.LibraryBookListSearchServlet: void <clinit>()>
<com.coveros.training.library.domainobjects.LibraryActionResults: void <clinit>()>
<com.coveros.training.library.domainobjects.Borrower: com.coveros.training.library.domainobjects.Borrower createEmpty()>
<com.coveros.training.authentication.domainobjects.RegistrationResult: java.lang.String toPrettyString()>
<java.lang.Object: void <init>()>
<java.sql.Date: void <init>(long)>
<javax.servlet.http.HttpServlet: void <init>()>
<java.lang.Enum: void <init>(java.lang.String,int)>
<java.lang.AssertionError: void <init>()>
<java.lang.StringBuilder: void <init>()>
<java.util.ArrayList: void <init>()>
<java.lang.RuntimeException: void <init>(java.lang.String)>
<java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<me.gosimple.nbvcxz.Nbvcxz: void <init>()>
<java.lang.RuntimeException: void <init>(java.lang.Throwable)>
<java.lang.Double: java.lang.Double valueOf(double)>
<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<java.time.LocalDate: java.time.LocalDate now()>
<java.sql.Date: java.sql.Date valueOf(java.time.LocalDate)>
<java.lang.Integer: java.lang.Integer valueOf(int)>
<java.lang.Long: java.lang.Long valueOf(long)>
<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>
<java.lang.Integer: java.lang.String toHexString(int)>
<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<java.math.BigInteger: java.math.BigInteger valueOf(long)>
<java.lang.Integer: int parseInt(java.lang.String)>
<java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>
<java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
<java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>
