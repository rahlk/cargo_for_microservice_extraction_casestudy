<org.springframework.boot.loader.WarLauncher: void <clinit>()>/$stack0	<org.springframework.boot.loader.WarLauncher: org.springframework.boot.loader.util.AsciiBytes WEB_INF>
<org.springframework.boot.loader.WarLauncher: void <clinit>()>/$stack2	<org.springframework.boot.loader.WarLauncher: org.springframework.boot.loader.util.AsciiBytes WEB_INF_CLASSES>
<org.springframework.boot.loader.WarLauncher: void <clinit>()>/$stack4	<org.springframework.boot.loader.WarLauncher: org.springframework.boot.loader.util.AsciiBytes WEB_INF_LIB>
<org.springframework.boot.loader.WarLauncher: void <clinit>()>/$stack6	<org.springframework.boot.loader.WarLauncher: org.springframework.boot.loader.util.AsciiBytes WEB_INF_LIB_PROVIDED>
<smpl.ordering.OrderingInitializer: void onStartup(javax.servlet.ServletContext)>/path#_28	<smpl.ordering.OrderingInitializer: java.lang.String s_applicationPath>
<smpl.ordering.OrderingInitializer: void <clinit>()>/$stringconstant0	<smpl.ordering.OrderingInitializer: java.lang.String s_applicationPath>
<org.springframework.boot.loader.PropertiesLauncher$ArchiveEntryFilter: void <clinit>()>/$stack0	<org.springframework.boot.loader.PropertiesLauncher$ArchiveEntryFilter: org.springframework.boot.loader.util.AsciiBytes DOT_JAR>
<org.springframework.boot.loader.PropertiesLauncher$ArchiveEntryFilter: void <clinit>()>/$stack1	<org.springframework.boot.loader.PropertiesLauncher$ArchiveEntryFilter: org.springframework.boot.loader.util.AsciiBytes DOT_ZIP>
<integration.services.MrpConnectService: void <clinit>()>/$stack0	<integration.services.MrpConnectService: org.slf4j.Logger log>
<smpl.ordering.PropertyHelper: void <clinit>()>/$stack1	<smpl.ordering.PropertyHelper: java.util.Properties s_props>
<smpl.ordering.PropertyHelper: void <clinit>()>/$stack3	<smpl.ordering.PropertyHelper: java.util.Properties s_props>
<smpl.ordering.repositories.mongodb.MongoQuoteRepository: void <clinit>()>/$stack0	<smpl.ordering.repositories.mongodb.MongoQuoteRepository: java.util.Random s_counter>
<org.springframework.boot.loader.jar.JarURLConnection: void <clinit>()>/$stack1	<org.springframework.boot.loader.jar.JarURLConnection: java.io.FileNotFoundException FILE_NOT_FOUND_EXCEPTION>
<org.springframework.boot.loader.jar.JarURLConnection: void <clinit>()>/$stack2	<org.springframework.boot.loader.jar.JarURLConnection: java.net.URL EMPTY_JAR_URL>
<org.springframework.boot.loader.jar.JarURLConnection: void <clinit>()>/$stack8	<org.springframework.boot.loader.jar.JarURLConnection: org.springframework.boot.loader.jar.JarURLConnection$JarEntryName EMPTY_JAR_ENTRY_NAME>
<org.springframework.boot.loader.jar.JarURLConnection: void <clinit>()>/$stack9	<org.springframework.boot.loader.jar.JarURLConnection: java.lang.ThreadLocal useFastExceptions>
<integration.services.QueueService: void <clinit>()>/$stack0	<integration.services.QueueService: org.slf4j.Logger log>
<smpl.ordering.repositories.mongodb.MongoOrderRepository: void reset()>/$stack2	<smpl.ordering.repositories.mongodb.MongoOrderRepository: java.util.concurrent.atomic.AtomicLong s_counter>
<smpl.ordering.repositories.mongodb.MongoOrderRepository: void <clinit>()>/$stack0	<smpl.ordering.repositories.mongodb.MongoOrderRepository: java.util.concurrent.atomic.AtomicLong s_counter>
<org.springframework.boot.loader.archive.ExplodedArchive: void <clinit>()>/$stack0	<org.springframework.boot.loader.archive.ExplodedArchive: java.util.Set SKIPPED_NAMES>
<org.springframework.boot.loader.archive.ExplodedArchive: void <clinit>()>/$stack3	<org.springframework.boot.loader.archive.ExplodedArchive: org.springframework.boot.loader.util.AsciiBytes MANIFEST_ENTRY_NAME>
<org.springframework.boot.loader.jar.JarEntryData: void <clinit>()>/$stack0	<org.springframework.boot.loader.jar.JarEntryData: org.springframework.boot.loader.util.AsciiBytes SLASH>
<smpl.ordering.models.OrderStatus: void <clinit>()>/$stack0	<smpl.ordering.models.OrderStatus: smpl.ordering.models.OrderStatus None>
<smpl.ordering.models.OrderStatus: void <clinit>()>/$stack1	<smpl.ordering.models.OrderStatus: smpl.ordering.models.OrderStatus Created>
<smpl.ordering.models.OrderStatus: void <clinit>()>/$stack2	<smpl.ordering.models.OrderStatus: smpl.ordering.models.OrderStatus Confirmed>
<smpl.ordering.models.OrderStatus: void <clinit>()>/$stack3	<smpl.ordering.models.OrderStatus: smpl.ordering.models.OrderStatus Started>
<smpl.ordering.models.OrderStatus: void <clinit>()>/$stack4	<smpl.ordering.models.OrderStatus: smpl.ordering.models.OrderStatus Built>
<smpl.ordering.models.OrderStatus: void <clinit>()>/$stack5	<smpl.ordering.models.OrderStatus: smpl.ordering.models.OrderStatus DeliveryConfirmed>
<smpl.ordering.models.OrderStatus: void <clinit>()>/$stack6	<smpl.ordering.models.OrderStatus: smpl.ordering.models.OrderStatus Shipped>
<smpl.ordering.models.OrderStatus: void <clinit>()>/$stack7	<smpl.ordering.models.OrderStatus: smpl.ordering.models.OrderStatus Delivered>
<smpl.ordering.models.OrderStatus: void <clinit>()>/$stack8	<smpl.ordering.models.OrderStatus: smpl.ordering.models.OrderStatus Installed>
<smpl.ordering.models.OrderStatus: void <clinit>()>/$stack9	<smpl.ordering.models.OrderStatus: smpl.ordering.models.OrderStatus[] $VALUES>
<org.springframework.boot.loader.data.RandomAccessData$ResourceAccess: void <clinit>()>/$stack0	<org.springframework.boot.loader.data.RandomAccessData$ResourceAccess: org.springframework.boot.loader.data.RandomAccessData$ResourceAccess ONCE>
<org.springframework.boot.loader.data.RandomAccessData$ResourceAccess: void <clinit>()>/$stack1	<org.springframework.boot.loader.data.RandomAccessData$ResourceAccess: org.springframework.boot.loader.data.RandomAccessData$ResourceAccess PER_READ>
<org.springframework.boot.loader.data.RandomAccessData$ResourceAccess: void <clinit>()>/$stack2	<org.springframework.boot.loader.data.RandomAccessData$ResourceAccess: org.springframework.boot.loader.data.RandomAccessData$ResourceAccess[] $VALUES>
<integration.infrastructure.ConfigurationHelpers: void <clinit>()>/$stack1	<integration.infrastructure.ConfigurationHelpers: java.util.Properties s_props>
<integration.infrastructure.ConfigurationHelpers: void <clinit>()>/$stack3	<integration.infrastructure.ConfigurationHelpers: java.util.Properties s_props>
<org.springframework.boot.loader.JarLauncher: void <clinit>()>/$stack0	<org.springframework.boot.loader.JarLauncher: org.springframework.boot.loader.util.AsciiBytes LIB>
<smpl.ordering.repositories.mock.MockQuoteRepository: void <clinit>()>/$stack0	<smpl.ordering.repositories.mock.MockQuoteRepository: java.util.Random s_counter>
<integration.services.QueueFactory: com.microsoft.azure.storage.queue.CloudQueue getQueue(java.lang.String)>/$stack17	<integration.services.QueueFactory: java.util.Map s_queueDictionary>
<integration.scheduled.CreateOrderProcessTask: void <clinit>()>/$stack0	<integration.scheduled.CreateOrderProcessTask: org.slf4j.Logger log>
<org.springframework.boot.loader.archive.JarFileArchive: void <clinit>()>/$stack0	<org.springframework.boot.loader.archive.JarFileArchive: org.springframework.boot.loader.util.AsciiBytes UNPACK_MARKER>
<integration.scheduled.UpdateProductProcessTask: void <clinit>()>/$stack0	<integration.scheduled.UpdateProductProcessTask: org.slf4j.Logger log>
<org.springframework.boot.loader.PropertiesLauncher: void <clinit>()>/$stack1	<org.springframework.boot.loader.PropertiesLauncher: java.util.List DEFAULT_PATHS>
<org.springframework.boot.loader.PropertiesLauncher: void <clinit>()>/$stack2	<org.springframework.boot.loader.PropertiesLauncher: java.util.regex.Pattern WORD_SEPARATOR>
<org.springframework.boot.loader.PropertiesLauncher: void <clinit>()>/$stack3	<org.springframework.boot.loader.PropertiesLauncher: java.net.URL[] EMPTY_URLS>
<org.springframework.boot.loader.util.SystemPropertyUtils: void <clinit>()>/$stack1	<org.springframework.boot.loader.util.SystemPropertyUtils: java.lang.String SIMPLE_PREFIX>
<org.springframework.boot.loader.util.AsciiBytes: void <clinit>()>/$stack0	<org.springframework.boot.loader.util.AsciiBytes: java.nio.charset.Charset UTF_8>
<smpl.ordering.OrderingConfiguration: void <init>()>/$stack1	<smpl.ordering.OrderingConfiguration: java.lang.ThreadLocal t_ambientTelemetryClient>
<smpl.ordering.OrderingConfiguration: void setApplicationContext(org.springframework.context.ApplicationContext)>/context#_0	<smpl.ordering.OrderingConfiguration: org.springframework.context.ApplicationContext applicationContext>
<org.springframework.boot.loader.jar.JarFile: void <clinit>()>/$stack0	<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.util.AsciiBytes META_INF>
<org.springframework.boot.loader.jar.JarFile: void <clinit>()>/$stack1	<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.util.AsciiBytes MANIFEST_MF>
<org.springframework.boot.loader.jar.JarFile: void <clinit>()>/$stack2	<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.util.AsciiBytes SIGNATURE_FILE_EXTENSION>
<org.springframework.boot.loader.jar.JarFile: void <clinit>()>/$stack3	<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.util.AsciiBytes SLASH>
<org.springframework.boot.loader.jar.Handler: void addToRootFileCache(java.io.File,org.springframework.boot.loader.jar.JarFile)>/$stack7	<org.springframework.boot.loader.jar.Handler: java.lang.ref.SoftReference rootFileCache>
<org.springframework.boot.loader.jar.Handler: void <clinit>()>/$stack2	<org.springframework.boot.loader.jar.Handler: java.lang.String[] FALLBACK_HANDLERS>
<org.springframework.boot.loader.jar.Handler: void <clinit>()>/$stack6	<org.springframework.boot.loader.jar.Handler: java.lang.ref.SoftReference rootFileCache>
<org.springframework.boot.loader.jar.Handler: void <clinit>()>/method_$$A_3#_58	<org.springframework.boot.loader.jar.Handler: java.lang.reflect.Method OPEN_CONNECTION_METHOD>
<org.springframework.boot.loader.LaunchedURLClassLoader: void <clinit>()>/$stack0	<org.springframework.boot.loader.LaunchedURLClassLoader: org.springframework.boot.loader.LaunchedURLClassLoader$LockProvider LOCK_PROVIDER>
<org.springframework.boot.loader.Launcher: void <clinit>()>/$stack6	<org.springframework.boot.loader.Launcher: java.lang.String RUNNER_CLASS>
<org.springframework.boot.loader.jar.Bytes: void <clinit>()>/$stack0	<org.springframework.boot.loader.jar.Bytes: byte[] EMPTY_BYTES>
<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/$stack2	<smpl.ordering.repositories.RepositoryFactory: smpl.ordering.repositories.RepositoryFactory s_factory>
<smpl.ordering.repositories.mock.MockOrderRepository: void reset()>/$stack2	<smpl.ordering.repositories.mock.MockOrderRepository: java.util.concurrent.atomic.AtomicLong s_counter>
<smpl.ordering.repositories.mock.MockOrderRepository: void <clinit>()>/$stack0	<smpl.ordering.repositories.mock.MockOrderRepository: java.util.concurrent.atomic.AtomicLong s_counter>
