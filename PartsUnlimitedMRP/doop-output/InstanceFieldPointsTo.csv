[<org.springframework.boot.loader.JarLauncher: void main(java.lang.String[])>/new org.springframework.boot.loader.JarLauncher/0]	<org.springframework.boot.loader.Launcher: org.springframework.boot.loader.archive.Archive createArchive()>/new java.io.File/0	<org.springframework.boot.loader.data.RandomAccessDataFile: java.io.File file>	[<org.springframework.boot.loader.jar.JarFile: void <init>(java.io.File)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0]	<org.springframework.boot.loader.data.RandomAccessDataFile: org.springframework.boot.loader.data.RandomAccessData getSubsection(long,long)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0
[<org.springframework.boot.loader.Launcher: org.springframework.boot.loader.archive.Archive createArchive()>/new org.springframework.boot.loader.archive.JarFileArchive/0]	<org.springframework.boot.loader.archive.JarFileArchive: org.springframework.boot.loader.archive.Archive getUnpackedNestedArchive(org.springframework.boot.loader.jar.JarEntryData)>/new java.io.File/0	<org.springframework.boot.loader.data.RandomAccessDataFile: java.io.File file>	[<org.springframework.boot.loader.jar.JarFile: void <init>(java.io.File)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0]	<org.springframework.boot.loader.data.RandomAccessDataFile: org.springframework.boot.loader.data.RandomAccessData getSubsection(long,long)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0
[<org.springframework.boot.loader.JarLauncher: void main(java.lang.String[])>/new org.springframework.boot.loader.JarLauncher/0]	<org.springframework.boot.loader.Launcher: org.springframework.boot.loader.archive.Archive createArchive()>/new java.io.File/0	<org.springframework.boot.loader.data.RandomAccessDataFile: java.io.File file>	[<org.springframework.boot.loader.data.RandomAccessDataFile: org.springframework.boot.loader.data.RandomAccessData getSubsection(long,long)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0]	<org.springframework.boot.loader.data.RandomAccessDataFile: org.springframework.boot.loader.data.RandomAccessData getSubsection(long,long)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0
[<org.springframework.boot.loader.Launcher: org.springframework.boot.loader.archive.Archive createArchive()>/new org.springframework.boot.loader.archive.JarFileArchive/0]	<org.springframework.boot.loader.archive.JarFileArchive: org.springframework.boot.loader.archive.Archive getUnpackedNestedArchive(org.springframework.boot.loader.jar.JarEntryData)>/new java.io.File/0	<org.springframework.boot.loader.data.RandomAccessDataFile: java.io.File file>	[<org.springframework.boot.loader.data.RandomAccessDataFile: org.springframework.boot.loader.data.RandomAccessData getSubsection(long,long)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0]	<org.springframework.boot.loader.data.RandomAccessDataFile: org.springframework.boot.loader.data.RandomAccessData getSubsection(long,long)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0
[<org.springframework.boot.loader.JarLauncher: void main(java.lang.String[])>/new org.springframework.boot.loader.JarLauncher/0]	<org.springframework.boot.loader.Launcher: org.springframework.boot.loader.archive.Archive createArchive()>/new java.io.File/0	<org.springframework.boot.loader.data.RandomAccessDataFile: java.io.File file>	[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarFile: void <init>(java.io.File)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0
[<org.springframework.boot.loader.Launcher: org.springframework.boot.loader.archive.Archive createArchive()>/new org.springframework.boot.loader.archive.JarFileArchive/0]	<org.springframework.boot.loader.archive.JarFileArchive: org.springframework.boot.loader.archive.Archive getUnpackedNestedArchive(org.springframework.boot.loader.jar.JarEntryData)>/new java.io.File/0	<org.springframework.boot.loader.data.RandomAccessDataFile: java.io.File file>	[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarFile: void <init>(java.io.File)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0
[<org.springframework.boot.loader.jar.JarFile: void <init>(java.io.File)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0]	<org.springframework.boot.loader.data.RandomAccessDataFile: void <init>(java.io.File,int)>/new org.springframework.boot.loader.data.RandomAccessDataFile$FilePool/0	<org.springframework.boot.loader.data.RandomAccessDataFile: org.springframework.boot.loader.data.RandomAccessDataFile$FilePool filePool>	[<org.springframework.boot.loader.jar.JarFile: void <init>(java.io.File)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0]	<org.springframework.boot.loader.data.RandomAccessDataFile: org.springframework.boot.loader.data.RandomAccessData getSubsection(long,long)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0
[<org.springframework.boot.loader.jar.JarFile: void <init>(java.io.File)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0]	<org.springframework.boot.loader.data.RandomAccessDataFile: void <init>(java.io.File,int)>/new org.springframework.boot.loader.data.RandomAccessDataFile$FilePool/0	<org.springframework.boot.loader.data.RandomAccessDataFile: org.springframework.boot.loader.data.RandomAccessDataFile$FilePool filePool>	[<org.springframework.boot.loader.data.RandomAccessDataFile: org.springframework.boot.loader.data.RandomAccessData getSubsection(long,long)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0]	<org.springframework.boot.loader.data.RandomAccessDataFile: org.springframework.boot.loader.data.RandomAccessData getSubsection(long,long)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0
[<org.springframework.boot.loader.jar.JarFile: void <init>(java.io.File)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0]	<org.springframework.boot.loader.data.RandomAccessDataFile: void <init>(java.io.File,int)>/new org.springframework.boot.loader.data.RandomAccessDataFile$FilePool/0	<org.springframework.boot.loader.data.RandomAccessDataFile: org.springframework.boot.loader.data.RandomAccessDataFile$FilePool filePool>	[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarFile: void <init>(java.io.File)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0
[<org.springframework.boot.loader.JarLauncher: void main(java.lang.String[])>/new org.springframework.boot.loader.JarLauncher/0]	<org.springframework.boot.loader.Launcher: org.springframework.boot.loader.archive.Archive createArchive()>/new org.springframework.boot.loader.archive.ExplodedArchive/0	<org.springframework.boot.loader.ExecutableArchiveLauncher: org.springframework.boot.loader.archive.Archive archive>	[<<immutable-context>>]	<org.springframework.boot.loader.JarLauncher: void main(java.lang.String[])>/new org.springframework.boot.loader.JarLauncher/0
[<org.springframework.boot.loader.JarLauncher: void main(java.lang.String[])>/new org.springframework.boot.loader.JarLauncher/0]	<org.springframework.boot.loader.Launcher: org.springframework.boot.loader.archive.Archive createArchive()>/new org.springframework.boot.loader.archive.JarFileArchive/0	<org.springframework.boot.loader.ExecutableArchiveLauncher: org.springframework.boot.loader.archive.Archive archive>	[<<immutable-context>>]	<org.springframework.boot.loader.JarLauncher: void main(java.lang.String[])>/new org.springframework.boot.loader.JarLauncher/0
[<org.springframework.boot.loader.JarLauncher: void main(java.lang.String[])>/new org.springframework.boot.loader.JarLauncher/0]	<org.springframework.boot.loader.ExecutableArchiveLauncher: void <init>()>/new org.springframework.boot.loader.InputArgumentsJavaAgentDetector/0	<org.springframework.boot.loader.ExecutableArchiveLauncher: org.springframework.boot.loader.JavaAgentDetector javaAgentDetector>	[<<immutable-context>>]	<org.springframework.boot.loader.JarLauncher: void main(java.lang.String[])>/new org.springframework.boot.loader.JarLauncher/0
[<<immutable-context>>]	<smpl.ordering.PropertyHelper: java.util.Properties getPropValues(java.lang.String)>/new java.util.Properties/0	<smpl.ordering.controllers.PingController: java.util.Properties props>	[<<immutable-hcontext>>]	smpl.ordering.controllers.PingController::MockObject
[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoDealersRepository/0	<smpl.ordering.repositories.mongodb.MongoQuoteRepository: smpl.ordering.repositories.DealersRepository dealers>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoQuoteRepository/0
[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoDealersRepository/0	<smpl.ordering.repositories.mongodb.MongoQuoteRepository: smpl.ordering.repositories.DealersRepository dealers>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoQuoteRepository/0
[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoDealersRepository/0	<smpl.ordering.repositories.mongodb.MongoQuoteRepository: smpl.ordering.repositories.DealersRepository dealers>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoQuoteRepository/0
[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoDealersRepository/0	<smpl.ordering.repositories.mongodb.MongoQuoteRepository: smpl.ordering.repositories.DealersRepository dealers>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoQuoteRepository/0
[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoDealersRepository/0	<smpl.ordering.repositories.mongodb.MongoQuoteRepository: smpl.ordering.repositories.DealersRepository dealers>	[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoQuoteRepository/0
[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoQuoteRepository/0]	<smpl.ordering.repositories.mongodb.MongoQuoteRepository: void <init>(org.springframework.data.mongodb.core.MongoTemplate,smpl.ordering.repositories.DealersRepository)>/new smpl.ordering.repositories.mongodb.MongoOperationsWithRetry/0	<smpl.ordering.repositories.mongodb.MongoQuoteRepository: org.springframework.data.mongodb.core.MongoOperations operations>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoQuoteRepository/0
[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoQuoteRepository/0]	<smpl.ordering.repositories.mongodb.MongoQuoteRepository: void <init>(org.springframework.data.mongodb.core.MongoTemplate,smpl.ordering.repositories.DealersRepository)>/new smpl.ordering.repositories.mongodb.MongoOperationsWithRetry/0	<smpl.ordering.repositories.mongodb.MongoQuoteRepository: org.springframework.data.mongodb.core.MongoOperations operations>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoQuoteRepository/0
[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoQuoteRepository/0]	<smpl.ordering.repositories.mongodb.MongoQuoteRepository: void <init>(org.springframework.data.mongodb.core.MongoTemplate,smpl.ordering.repositories.DealersRepository)>/new smpl.ordering.repositories.mongodb.MongoOperationsWithRetry/0	<smpl.ordering.repositories.mongodb.MongoQuoteRepository: org.springframework.data.mongodb.core.MongoOperations operations>	[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoQuoteRepository/0
[<smpl.ordering.repositories.mongodb.MongoShipmentRepository: smpl.ordering.models.ShipmentRecord createShipment(smpl.ordering.models.ShipmentRecord)>/new smpl.ordering.repositories.mongodb.models.ShipmentDetails/0]	<smpl.ordering.repositories.mongodb.models.ShipmentDetails: void <init>(smpl.ordering.models.ShipmentRecord)>/new smpl.ordering.models.ShipmentEventInfo[]/1	<smpl.ordering.repositories.mongodb.models.ShipmentDetails: smpl.ordering.models.ShipmentEventInfo[] events>	[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoShipmentRepository/0]	<smpl.ordering.repositories.mongodb.MongoShipmentRepository: smpl.ordering.models.ShipmentRecord createShipment(smpl.ordering.models.ShipmentRecord)>/new smpl.ordering.repositories.mongodb.models.ShipmentDetails/0
[<smpl.ordering.repositories.mongodb.MongoShipmentRepository: boolean saveUpdates(smpl.ordering.repositories.mongodb.models.ShipmentDetails,smpl.ordering.models.ShipmentRecord)>/new smpl.ordering.repositories.mongodb.models.ShipmentDetails/0]	<smpl.ordering.repositories.mongodb.models.ShipmentDetails: void <init>(smpl.ordering.models.ShipmentRecord)>/new smpl.ordering.models.ShipmentEventInfo[]/1	<smpl.ordering.repositories.mongodb.models.ShipmentDetails: smpl.ordering.models.ShipmentEventInfo[] events>	[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoShipmentRepository/0]	<smpl.ordering.repositories.mongodb.MongoShipmentRepository: boolean saveUpdates(smpl.ordering.repositories.mongodb.models.ShipmentDetails,smpl.ordering.models.ShipmentRecord)>/new smpl.ordering.repositories.mongodb.models.ShipmentDetails/0
[<<immutable-hcontext>>]	<<null pseudo heap>>	<smpl.ordering.models.Delivery: smpl.ordering.models.Quote quote>	[<<immutable-context>>]	<smpl.ordering.controllers.ShipmentController: org.springframework.http.ResponseEntity getDeliveries()>/new smpl.ordering.models.Delivery/0
[<<immutable-hcontext>>]	<<null pseudo heap>>	<smpl.ordering.models.Delivery: smpl.ordering.models.Order order>	[<<immutable-context>>]	<smpl.ordering.controllers.ShipmentController: org.springframework.http.ResponseEntity getDeliveries()>/new smpl.ordering.models.Delivery/0
[<org.springframework.boot.loader.Launcher: org.springframework.boot.loader.archive.Archive createArchive()>/new org.springframework.boot.loader.archive.JarFileArchive/0]	<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0	<org.springframework.boot.loader.jar.JarFile$2: org.springframework.boot.loader.jar.JarFile this$0>	[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.jar.JarFile createJarFileFromDirectoryEntry(org.springframework.boot.loader.jar.JarEntryData)>/new org.springframework.boot.loader.jar.JarFile$2/0
[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoQuoteRepository/0	<smpl.ordering.repositories.mongodb.MongoOrderRepository: smpl.ordering.repositories.QuoteRepository quotes>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoOrderRepository/0
[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoQuoteRepository/0	<smpl.ordering.repositories.mongodb.MongoOrderRepository: smpl.ordering.repositories.QuoteRepository quotes>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoOrderRepository/0
[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoQuoteRepository/0	<smpl.ordering.repositories.mongodb.MongoOrderRepository: smpl.ordering.repositories.QuoteRepository quotes>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoOrderRepository/0
[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoQuoteRepository/0	<smpl.ordering.repositories.mongodb.MongoOrderRepository: smpl.ordering.repositories.QuoteRepository quotes>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoOrderRepository/0
[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoQuoteRepository/0	<smpl.ordering.repositories.mongodb.MongoOrderRepository: smpl.ordering.repositories.QuoteRepository quotes>	[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoOrderRepository/0
[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoOrderRepository/0]	<smpl.ordering.repositories.mongodb.MongoOrderRepository: void <init>(org.springframework.data.mongodb.core.MongoTemplate,smpl.ordering.repositories.QuoteRepository)>/new smpl.ordering.repositories.mongodb.MongoOperationsWithRetry/0	<smpl.ordering.repositories.mongodb.MongoOrderRepository: org.springframework.data.mongodb.core.MongoOperations operations>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoOrderRepository/0
[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoOrderRepository/0]	<smpl.ordering.repositories.mongodb.MongoOrderRepository: void <init>(org.springframework.data.mongodb.core.MongoTemplate,smpl.ordering.repositories.QuoteRepository)>/new smpl.ordering.repositories.mongodb.MongoOperationsWithRetry/0	<smpl.ordering.repositories.mongodb.MongoOrderRepository: org.springframework.data.mongodb.core.MongoOperations operations>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoOrderRepository/0
[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoOrderRepository/0]	<smpl.ordering.repositories.mongodb.MongoOrderRepository: void <init>(org.springframework.data.mongodb.core.MongoTemplate,smpl.ordering.repositories.QuoteRepository)>/new smpl.ordering.repositories.mongodb.MongoOperationsWithRetry/0	<smpl.ordering.repositories.mongodb.MongoOrderRepository: org.springframework.data.mongodb.core.MongoOperations operations>	[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoOrderRepository/0
[<org.springframework.boot.loader.JarLauncher: void main(java.lang.String[])>/new org.springframework.boot.loader.JarLauncher/0]	<org.springframework.boot.loader.Launcher: org.springframework.boot.loader.archive.Archive createArchive()>/new java.io.File/0	<org.springframework.boot.loader.archive.ExplodedArchive: java.io.File root>	[<org.springframework.boot.loader.JarLauncher: void main(java.lang.String[])>/new org.springframework.boot.loader.JarLauncher/0]	<org.springframework.boot.loader.Launcher: org.springframework.boot.loader.archive.Archive createArchive()>/new org.springframework.boot.loader.archive.ExplodedArchive/0
[<org.springframework.boot.loader.archive.ExplodedArchive: org.springframework.boot.loader.archive.Archive getNestedArchive(org.springframework.boot.loader.archive.Archive$Entry)>/new org.springframework.boot.loader.archive.ExplodedArchive/0]	<org.springframework.boot.loader.archive.ExplodedArchive: void <init>(java.io.File,boolean)>/new java.util.LinkedHashMap/0	<org.springframework.boot.loader.archive.ExplodedArchive: java.util.Map entries>	[<org.springframework.boot.loader.Launcher: org.springframework.boot.loader.archive.Archive createArchive()>/new org.springframework.boot.loader.archive.ExplodedArchive/0]	<org.springframework.boot.loader.archive.ExplodedArchive: org.springframework.boot.loader.archive.Archive getNestedArchive(org.springframework.boot.loader.archive.Archive$Entry)>/new org.springframework.boot.loader.archive.ExplodedArchive/0
[<org.springframework.boot.loader.Launcher: org.springframework.boot.loader.archive.Archive createArchive()>/new org.springframework.boot.loader.archive.ExplodedArchive/0]	<org.springframework.boot.loader.archive.ExplodedArchive: void <init>(java.io.File,boolean)>/new java.util.LinkedHashMap/0	<org.springframework.boot.loader.archive.ExplodedArchive: java.util.Map entries>	[<org.springframework.boot.loader.JarLauncher: void main(java.lang.String[])>/new org.springframework.boot.loader.JarLauncher/0]	<org.springframework.boot.loader.Launcher: org.springframework.boot.loader.archive.Archive createArchive()>/new org.springframework.boot.loader.archive.ExplodedArchive/0
[<org.springframework.boot.loader.Launcher: org.springframework.boot.loader.archive.Archive createArchive()>/new org.springframework.boot.loader.archive.ExplodedArchive/0]	<org.springframework.boot.loader.archive.ExplodedArchive: java.util.jar.Manifest getManifest()>/new java.util.jar.Manifest/0	<org.springframework.boot.loader.archive.ExplodedArchive: java.util.jar.Manifest manifest>	[<org.springframework.boot.loader.JarLauncher: void main(java.lang.String[])>/new org.springframework.boot.loader.JarLauncher/0]	<org.springframework.boot.loader.Launcher: org.springframework.boot.loader.archive.Archive createArchive()>/new org.springframework.boot.loader.archive.ExplodedArchive/0
[<org.springframework.boot.loader.archive.JarFileArchive: org.springframework.boot.loader.archive.Archive getUnpackedNestedArchive(org.springframework.boot.loader.jar.JarEntryData)>/new org.springframework.boot.loader.archive.JarFileArchive/0]	<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0	<org.springframework.boot.loader.jar.JarEntryData: org.springframework.boot.loader.jar.JarFile source>	[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarEntryData: org.springframework.boot.loader.jar.JarEntryData fromInputStream(org.springframework.boot.loader.jar.JarFile,java.io.InputStream)>/new org.springframework.boot.loader.jar.JarEntryData/0
[<org.springframework.boot.loader.Launcher: org.springframework.boot.loader.archive.Archive createArchive()>/new org.springframework.boot.loader.archive.JarFileArchive/0]	<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0	<org.springframework.boot.loader.jar.JarEntryData: org.springframework.boot.loader.jar.JarFile source>	[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarEntryData: org.springframework.boot.loader.jar.JarEntryData fromInputStream(org.springframework.boot.loader.jar.JarFile,java.io.InputStream)>/new org.springframework.boot.loader.jar.JarEntryData/0
[<org.springframework.boot.loader.archive.ExplodedArchive: org.springframework.boot.loader.archive.Archive getNestedArchive(org.springframework.boot.loader.archive.Archive$Entry)>/new org.springframework.boot.loader.archive.JarFileArchive/0]	<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0	<org.springframework.boot.loader.jar.JarEntryData: org.springframework.boot.loader.jar.JarFile source>	[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarEntryData: org.springframework.boot.loader.jar.JarEntryData fromInputStream(org.springframework.boot.loader.jar.JarFile,java.io.InputStream)>/new org.springframework.boot.loader.jar.JarEntryData/0
[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.jar.JarFile createJarFileFromFileEntry(org.springframework.boot.loader.jar.JarEntryData)>/new org.springframework.boot.loader.jar.JarFile/0	<org.springframework.boot.loader.jar.JarEntryData: org.springframework.boot.loader.jar.JarFile source>	[<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.jar.JarFile createJarFileFromFileEntry(org.springframework.boot.loader.jar.JarEntryData)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarEntryData: org.springframework.boot.loader.jar.JarEntryData fromInputStream(org.springframework.boot.loader.jar.JarFile,java.io.InputStream)>/new org.springframework.boot.loader.jar.JarEntryData/0
[<<immutable-hcontext>>]	<org.springframework.boot.loader.jar.JarEntryData: org.springframework.boot.loader.jar.JarEntryData fromInputStream(org.springframework.boot.loader.jar.JarFile,java.io.InputStream)>/new byte[]/0	<org.springframework.boot.loader.jar.JarEntryData: byte[] header>	[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarEntryData: org.springframework.boot.loader.jar.JarEntryData fromInputStream(org.springframework.boot.loader.jar.JarFile,java.io.InputStream)>/new org.springframework.boot.loader.jar.JarEntryData/0
[<<immutable-hcontext>>]	<org.springframework.boot.loader.jar.JarEntryData: org.springframework.boot.loader.jar.JarEntryData fromInputStream(org.springframework.boot.loader.jar.JarFile,java.io.InputStream)>/new byte[]/0	<org.springframework.boot.loader.jar.JarEntryData: byte[] header>	[<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.jar.JarFile createJarFileFromFileEntry(org.springframework.boot.loader.jar.JarEntryData)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarEntryData: org.springframework.boot.loader.jar.JarEntryData fromInputStream(org.springframework.boot.loader.jar.JarFile,java.io.InputStream)>/new org.springframework.boot.loader.jar.JarEntryData/0
[<org.springframework.boot.loader.jar.JarEntryData: org.springframework.boot.loader.jar.JarEntryData fromInputStream(org.springframework.boot.loader.jar.JarFile,java.io.InputStream)>/new org.springframework.boot.loader.jar.JarEntryData/0]	<org.springframework.boot.loader.jar.JarEntryData: void <init>(org.springframework.boot.loader.jar.JarFile,byte[],java.io.InputStream)>/new org.springframework.boot.loader.util.AsciiBytes/0	<org.springframework.boot.loader.jar.JarEntryData: org.springframework.boot.loader.util.AsciiBytes name>	[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarEntryData: org.springframework.boot.loader.jar.JarEntryData fromInputStream(org.springframework.boot.loader.jar.JarFile,java.io.InputStream)>/new org.springframework.boot.loader.jar.JarEntryData/0
[<org.springframework.boot.loader.jar.JarEntryData: org.springframework.boot.loader.jar.JarEntryData fromInputStream(org.springframework.boot.loader.jar.JarFile,java.io.InputStream)>/new org.springframework.boot.loader.jar.JarEntryData/0]	<org.springframework.boot.loader.jar.JarEntryData: void <init>(org.springframework.boot.loader.jar.JarFile,byte[],java.io.InputStream)>/new org.springframework.boot.loader.util.AsciiBytes/0	<org.springframework.boot.loader.jar.JarEntryData: org.springframework.boot.loader.util.AsciiBytes name>	[<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.jar.JarFile createJarFileFromFileEntry(org.springframework.boot.loader.jar.JarEntryData)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarEntryData: org.springframework.boot.loader.jar.JarEntryData fromInputStream(org.springframework.boot.loader.jar.JarFile,java.io.InputStream)>/new org.springframework.boot.loader.jar.JarEntryData/0
[<<immutable-hcontext>>]	<org.springframework.boot.loader.jar.Bytes: byte[] get(java.io.InputStream,long)>/new byte[]/0	<org.springframework.boot.loader.jar.JarEntryData: byte[] extra>	[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarEntryData: org.springframework.boot.loader.jar.JarEntryData fromInputStream(org.springframework.boot.loader.jar.JarFile,java.io.InputStream)>/new org.springframework.boot.loader.jar.JarEntryData/0
[<<immutable-hcontext>>]	<org.springframework.boot.loader.jar.Bytes: void <clinit>()>/new byte[]/0	<org.springframework.boot.loader.jar.JarEntryData: byte[] extra>	[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarEntryData: org.springframework.boot.loader.jar.JarEntryData fromInputStream(org.springframework.boot.loader.jar.JarFile,java.io.InputStream)>/new org.springframework.boot.loader.jar.JarEntryData/0
[<<immutable-hcontext>>]	<org.springframework.boot.loader.jar.Bytes: byte[] get(java.io.InputStream,long)>/new byte[]/0	<org.springframework.boot.loader.jar.JarEntryData: byte[] extra>	[<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.jar.JarFile createJarFileFromFileEntry(org.springframework.boot.loader.jar.JarEntryData)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarEntryData: org.springframework.boot.loader.jar.JarEntryData fromInputStream(org.springframework.boot.loader.jar.JarFile,java.io.InputStream)>/new org.springframework.boot.loader.jar.JarEntryData/0
[<<immutable-hcontext>>]	<org.springframework.boot.loader.jar.Bytes: void <clinit>()>/new byte[]/0	<org.springframework.boot.loader.jar.JarEntryData: byte[] extra>	[<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.jar.JarFile createJarFileFromFileEntry(org.springframework.boot.loader.jar.JarEntryData)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarEntryData: org.springframework.boot.loader.jar.JarEntryData fromInputStream(org.springframework.boot.loader.jar.JarFile,java.io.InputStream)>/new org.springframework.boot.loader.jar.JarEntryData/0
[<org.springframework.boot.loader.jar.JarEntryData: org.springframework.boot.loader.jar.JarEntryData fromInputStream(org.springframework.boot.loader.jar.JarFile,java.io.InputStream)>/new org.springframework.boot.loader.jar.JarEntryData/0]	<org.springframework.boot.loader.jar.JarEntryData: void <init>(org.springframework.boot.loader.jar.JarFile,byte[],java.io.InputStream)>/new org.springframework.boot.loader.util.AsciiBytes/1	<org.springframework.boot.loader.jar.JarEntryData: org.springframework.boot.loader.util.AsciiBytes comment>	[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarEntryData: org.springframework.boot.loader.jar.JarEntryData fromInputStream(org.springframework.boot.loader.jar.JarFile,java.io.InputStream)>/new org.springframework.boot.loader.jar.JarEntryData/0
[<org.springframework.boot.loader.jar.JarEntryData: org.springframework.boot.loader.jar.JarEntryData fromInputStream(org.springframework.boot.loader.jar.JarFile,java.io.InputStream)>/new org.springframework.boot.loader.jar.JarEntryData/0]	<org.springframework.boot.loader.jar.JarEntryData: void <init>(org.springframework.boot.loader.jar.JarFile,byte[],java.io.InputStream)>/new org.springframework.boot.loader.util.AsciiBytes/1	<org.springframework.boot.loader.jar.JarEntryData: org.springframework.boot.loader.util.AsciiBytes comment>	[<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.jar.JarFile createJarFileFromFileEntry(org.springframework.boot.loader.jar.JarEntryData)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarEntryData: org.springframework.boot.loader.jar.JarEntryData fromInputStream(org.springframework.boot.loader.jar.JarFile,java.io.InputStream)>/new org.springframework.boot.loader.jar.JarEntryData/0
[<org.springframework.boot.loader.jar.JarFile: void <init>(java.io.File)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0]	<org.springframework.boot.loader.data.RandomAccessDataFile: org.springframework.boot.loader.data.RandomAccessData getSubsection(long,long)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0	<org.springframework.boot.loader.jar.JarEntryData: org.springframework.boot.loader.data.RandomAccessData data>	[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarEntryData: org.springframework.boot.loader.jar.JarEntryData fromInputStream(org.springframework.boot.loader.jar.JarFile,java.io.InputStream)>/new org.springframework.boot.loader.jar.JarEntryData/0
[<org.springframework.boot.loader.data.RandomAccessDataFile: org.springframework.boot.loader.data.RandomAccessData getSubsection(long,long)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0]	<org.springframework.boot.loader.data.RandomAccessDataFile: org.springframework.boot.loader.data.RandomAccessData getSubsection(long,long)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0	<org.springframework.boot.loader.jar.JarEntryData: org.springframework.boot.loader.data.RandomAccessData data>	[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarEntryData: org.springframework.boot.loader.jar.JarEntryData fromInputStream(org.springframework.boot.loader.jar.JarFile,java.io.InputStream)>/new org.springframework.boot.loader.jar.JarEntryData/0
[<<immutable-hcontext>>]	java.lang.String::MockObject	<smpl.ordering.models.Order: java.lang.String orderId>	[<<immutable-hcontext>>]	smpl.ordering.models.Order::MockObject
[<<immutable-hcontext>>]	java.lang.String::MockObject	<smpl.ordering.models.Order: java.lang.String quoteId>	[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoOrderRepository/0]	<smpl.ordering.repositories.mongodb.MongoOrderRepository: smpl.ordering.models.Order createOrder(java.lang.String)>/new smpl.ordering.models.Order/0
[<<immutable-hcontext>>]	java.lang.String::MockObject	<smpl.ordering.models.Order: java.lang.String quoteId>	[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockOrderRepository/0]	<smpl.ordering.repositories.mock.MockOrderRepository: smpl.ordering.models.Order createOrder(java.lang.String)>/new smpl.ordering.models.Order/0
[<<immutable-context>>]	<smpl.ordering.models.OrderStatus: void <clinit>()>/new smpl.ordering.models.OrderStatus/0	<smpl.ordering.models.Order: smpl.ordering.models.OrderStatus status>	[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoOrderRepository/0]	<smpl.ordering.repositories.mongodb.MongoOrderRepository: smpl.ordering.models.Order createOrder(java.lang.String)>/new smpl.ordering.models.Order/0
[<<immutable-context>>]	<smpl.ordering.models.OrderStatus: void <clinit>()>/new smpl.ordering.models.OrderStatus/1	<smpl.ordering.models.Order: smpl.ordering.models.OrderStatus status>	[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoOrderRepository/0]	<smpl.ordering.repositories.mongodb.MongoOrderRepository: smpl.ordering.models.Order createOrder(java.lang.String)>/new smpl.ordering.models.Order/0
[<<immutable-context>>]	<smpl.ordering.models.OrderStatus: void <clinit>()>/new smpl.ordering.models.OrderStatus/0	<smpl.ordering.models.Order: smpl.ordering.models.OrderStatus status>	[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockOrderRepository/0]	<smpl.ordering.repositories.mock.MockOrderRepository: smpl.ordering.models.Order createOrder(java.lang.String)>/new smpl.ordering.models.Order/0
[<<immutable-context>>]	<smpl.ordering.models.OrderStatus: void <clinit>()>/new smpl.ordering.models.OrderStatus/1	<smpl.ordering.models.Order: smpl.ordering.models.OrderStatus status>	[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockOrderRepository/0]	<smpl.ordering.repositories.mock.MockOrderRepository: smpl.ordering.models.Order createOrder(java.lang.String)>/new smpl.ordering.models.Order/0
[<<immutable-context>>]	<smpl.ordering.models.OrderStatus: void <clinit>()>/new smpl.ordering.models.OrderStatus/0	<smpl.ordering.models.Order: smpl.ordering.models.OrderStatus status>	[<<immutable-hcontext>>]	smpl.ordering.models.Order::MockObject
[<smpl.ordering.repositories.mongodb.MongoOrderRepository: smpl.ordering.models.Order createOrder(java.lang.String)>/new smpl.ordering.models.Order/0]	<smpl.ordering.models.Order: void <init>()>/new java.util.ArrayList/0	<smpl.ordering.models.Order: java.util.List events>	[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoOrderRepository/0]	<smpl.ordering.repositories.mongodb.MongoOrderRepository: smpl.ordering.models.Order createOrder(java.lang.String)>/new smpl.ordering.models.Order/0
[<smpl.ordering.repositories.mock.MockOrderRepository: smpl.ordering.models.Order createOrder(java.lang.String)>/new smpl.ordering.models.Order/0]	<smpl.ordering.models.Order: void <init>()>/new java.util.ArrayList/0	<smpl.ordering.models.Order: java.util.List events>	[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockOrderRepository/0]	<smpl.ordering.repositories.mock.MockOrderRepository: smpl.ordering.models.Order createOrder(java.lang.String)>/new smpl.ordering.models.Order/0
[<<immutable-context>>]	<smpl.ordering.models.Order: void <init>()>/new java.util.ArrayList/0	<smpl.ordering.models.Order: java.util.List events>	[<<immutable-hcontext>>]	smpl.ordering.models.Order::MockObject
[<<immutable-hcontext>>]	java.lang.String::MockObject	<smpl.ordering.repositories.mongodb.models.OrderDetails: java.lang.String orderId>	[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoOrderRepository/0]	<smpl.ordering.repositories.mongodb.MongoOrderRepository: boolean saveOrder(java.lang.String,smpl.ordering.models.Order,smpl.ordering.repositories.mongodb.models.OrderDetails)>/new smpl.ordering.repositories.mongodb.models.OrderDetails/0
[<<immutable-hcontext>>]	java.lang.String::MockObject	<smpl.ordering.repositories.mongodb.models.OrderDetails: java.lang.String quoteId>	[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoOrderRepository/0]	<smpl.ordering.repositories.mongodb.MongoOrderRepository: smpl.ordering.models.Order createOrder(java.lang.String)>/new smpl.ordering.repositories.mongodb.models.OrderDetails/0
[<<immutable-context>>]	<smpl.ordering.models.OrderStatus: void <clinit>()>/new smpl.ordering.models.OrderStatus/0	<smpl.ordering.repositories.mongodb.models.OrderDetails: smpl.ordering.models.OrderStatus status>	[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoOrderRepository/0]	<smpl.ordering.repositories.mongodb.MongoOrderRepository: smpl.ordering.models.Order createOrder(java.lang.String)>/new smpl.ordering.repositories.mongodb.models.OrderDetails/0
[<<immutable-context>>]	<smpl.ordering.models.OrderStatus: void <clinit>()>/new smpl.ordering.models.OrderStatus/1	<smpl.ordering.repositories.mongodb.models.OrderDetails: smpl.ordering.models.OrderStatus status>	[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoOrderRepository/0]	<smpl.ordering.repositories.mongodb.MongoOrderRepository: smpl.ordering.models.Order createOrder(java.lang.String)>/new smpl.ordering.repositories.mongodb.models.OrderDetails/0
[<<immutable-context>>]	<smpl.ordering.models.OrderStatus: void <clinit>()>/new smpl.ordering.models.OrderStatus/0	<smpl.ordering.repositories.mongodb.models.OrderDetails: smpl.ordering.models.OrderStatus status>	[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoOrderRepository/0]	<smpl.ordering.repositories.mongodb.MongoOrderRepository: boolean saveOrder(java.lang.String,smpl.ordering.models.Order,smpl.ordering.repositories.mongodb.models.OrderDetails)>/new smpl.ordering.repositories.mongodb.models.OrderDetails/0
[<smpl.ordering.repositories.mongodb.MongoOrderRepository: smpl.ordering.models.Order createOrder(java.lang.String)>/new smpl.ordering.repositories.mongodb.models.OrderDetails/0]	<smpl.ordering.repositories.mongodb.models.OrderDetails: void <init>(smpl.ordering.models.Order)>/new smpl.ordering.models.OrderEventInfo[]/1	<smpl.ordering.repositories.mongodb.models.OrderDetails: smpl.ordering.models.OrderEventInfo[] events>	[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoOrderRepository/0]	<smpl.ordering.repositories.mongodb.MongoOrderRepository: smpl.ordering.models.Order createOrder(java.lang.String)>/new smpl.ordering.repositories.mongodb.models.OrderDetails/0
[<smpl.ordering.repositories.mongodb.MongoOrderRepository: boolean saveOrder(java.lang.String,smpl.ordering.models.Order,smpl.ordering.repositories.mongodb.models.OrderDetails)>/new smpl.ordering.repositories.mongodb.models.OrderDetails/0]	<smpl.ordering.repositories.mongodb.models.OrderDetails: void <init>(smpl.ordering.models.Order)>/new smpl.ordering.models.OrderEventInfo[]/1	<smpl.ordering.repositories.mongodb.models.OrderDetails: smpl.ordering.models.OrderEventInfo[] events>	[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoOrderRepository/0]	<smpl.ordering.repositories.mongodb.MongoOrderRepository: boolean saveOrder(java.lang.String,smpl.ordering.models.Order,smpl.ordering.repositories.mongodb.models.OrderDetails)>/new smpl.ordering.repositories.mongodb.models.OrderDetails/0
[<<immutable-hcontext>>]	<org.springframework.boot.loader.jar.Bytes: byte[] get(java.io.InputStream,long)>/new byte[]/0	<org.springframework.boot.loader.jar.CentralDirectoryEndRecord: byte[] block>	[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarFile: void <init>(org.springframework.boot.loader.data.RandomAccessDataFile,java.lang.String,org.springframework.boot.loader.data.RandomAccessData)>/new org.springframework.boot.loader.jar.CentralDirectoryEndRecord/0
[<<immutable-hcontext>>]	<org.springframework.boot.loader.jar.Bytes: void <clinit>()>/new byte[]/0	<org.springframework.boot.loader.jar.CentralDirectoryEndRecord: byte[] block>	[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarFile: void <init>(org.springframework.boot.loader.data.RandomAccessDataFile,java.lang.String,org.springframework.boot.loader.data.RandomAccessData)>/new org.springframework.boot.loader.jar.CentralDirectoryEndRecord/0
[<<immutable-hcontext>>]	<org.springframework.boot.loader.jar.Bytes: byte[] get(java.io.InputStream,long)>/new byte[]/0	<org.springframework.boot.loader.jar.CentralDirectoryEndRecord: byte[] block>	[<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.jar.JarFile createJarFileFromFileEntry(org.springframework.boot.loader.jar.JarEntryData)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarFile: void <init>(org.springframework.boot.loader.data.RandomAccessDataFile,java.lang.String,org.springframework.boot.loader.data.RandomAccessData)>/new org.springframework.boot.loader.jar.CentralDirectoryEndRecord/0
[<<immutable-hcontext>>]	<org.springframework.boot.loader.jar.Bytes: void <clinit>()>/new byte[]/0	<org.springframework.boot.loader.jar.CentralDirectoryEndRecord: byte[] block>	[<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.jar.JarFile createJarFileFromFileEntry(org.springframework.boot.loader.jar.JarEntryData)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarFile: void <init>(org.springframework.boot.loader.data.RandomAccessDataFile,java.lang.String,org.springframework.boot.loader.data.RandomAccessData)>/new org.springframework.boot.loader.jar.CentralDirectoryEndRecord/0
[<<immutable-hcontext>>]	java.lang.String::MockObject	<smpl.ordering.models.Quote: java.lang.String quoteId>	[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoQuoteRepository/0]	<smpl.ordering.repositories.mongodb.MongoQuoteRepository: smpl.ordering.models.Quote createQuote(smpl.ordering.models.Quote)>/new smpl.ordering.models.Quote/0
[<<immutable-hcontext>>]	java.lang.String::MockObject	<smpl.ordering.models.Quote: java.lang.String quoteId>	[<<immutable-hcontext>>]	smpl.ordering.models.Quote::MockObject
[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockDealersRepository/0]	<smpl.ordering.repositories.mock.MockDealersRepository: void <init>()>/new java.util.ArrayList/0	<smpl.ordering.repositories.mock.MockDealersRepository: java.util.List dealers>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockDealersRepository/0
[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockDealersRepository/0]	<smpl.ordering.repositories.mock.MockDealersRepository: void <init>()>/new java.util.ArrayList/0	<smpl.ordering.repositories.mock.MockDealersRepository: java.util.List dealers>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockDealersRepository/0
[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockDealersRepository/0]	<smpl.ordering.repositories.mock.MockDealersRepository: void <init>()>/new java.util.ArrayList/0	<smpl.ordering.repositories.mock.MockDealersRepository: java.util.List dealers>	[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockDealersRepository/0
[<org.springframework.boot.loader.ExecutableArchiveLauncher: void <init>()>/new org.springframework.boot.loader.InputArgumentsJavaAgentDetector/0]	<org.springframework.boot.loader.InputArgumentsJavaAgentDetector: java.util.Set getJavaAgentJars(java.util.List)>/new java.util.HashSet/0	<org.springframework.boot.loader.InputArgumentsJavaAgentDetector: java.util.Set javaAgentJars>	[<org.springframework.boot.loader.JarLauncher: void main(java.lang.String[])>/new org.springframework.boot.loader.JarLauncher/0]	<org.springframework.boot.loader.ExecutableArchiveLauncher: void <init>()>/new org.springframework.boot.loader.InputArgumentsJavaAgentDetector/0
[<<immutable-context>>]	<org.springframework.boot.loader.JarLauncher: void main(java.lang.String[])>/new org.springframework.boot.loader.JarLauncher/0	<org.springframework.boot.loader.ExecutableArchiveLauncher$1: org.springframework.boot.loader.ExecutableArchiveLauncher this$0>	[<org.springframework.boot.loader.JarLauncher: void main(java.lang.String[])>/new org.springframework.boot.loader.JarLauncher/0]	<org.springframework.boot.loader.ExecutableArchiveLauncher: java.util.List getClassPathArchives()>/new org.springframework.boot.loader.ExecutableArchiveLauncher$1/0
[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockQuoteRepository/0]	<smpl.ordering.repositories.mock.MockQuoteRepository: void <init>(smpl.ordering.repositories.CatalogItemsRepository,smpl.ordering.repositories.DealersRepository)>/new java.util.ArrayList/0	<smpl.ordering.repositories.mock.MockQuoteRepository: java.util.List quotes>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockQuoteRepository/0
[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockQuoteRepository/0]	<smpl.ordering.repositories.mock.MockQuoteRepository: void <init>(smpl.ordering.repositories.CatalogItemsRepository,smpl.ordering.repositories.DealersRepository)>/new java.util.ArrayList/0	<smpl.ordering.repositories.mock.MockQuoteRepository: java.util.List quotes>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockQuoteRepository/0
[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockQuoteRepository/0]	<smpl.ordering.repositories.mock.MockQuoteRepository: void <init>(smpl.ordering.repositories.CatalogItemsRepository,smpl.ordering.repositories.DealersRepository)>/new java.util.ArrayList/0	<smpl.ordering.repositories.mock.MockQuoteRepository: java.util.List quotes>	[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockQuoteRepository/0
[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockDealersRepository/0	<smpl.ordering.repositories.mock.MockQuoteRepository: smpl.ordering.repositories.DealersRepository dealers>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockQuoteRepository/0
[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockDealersRepository/0	<smpl.ordering.repositories.mock.MockQuoteRepository: smpl.ordering.repositories.DealersRepository dealers>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockQuoteRepository/0
[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockDealersRepository/0	<smpl.ordering.repositories.mock.MockQuoteRepository: smpl.ordering.repositories.DealersRepository dealers>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockQuoteRepository/0
[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockDealersRepository/0	<smpl.ordering.repositories.mock.MockQuoteRepository: smpl.ordering.repositories.DealersRepository dealers>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockQuoteRepository/0
[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockDealersRepository/0	<smpl.ordering.repositories.mock.MockQuoteRepository: smpl.ordering.repositories.DealersRepository dealers>	[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockQuoteRepository/0
[<org.springframework.boot.loader.archive.ExplodedArchive: org.springframework.boot.loader.archive.Archive getNestedArchive(org.springframework.boot.loader.archive.Archive$Entry)>/new org.springframework.boot.loader.archive.JarFileArchive/0]	<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0	<org.springframework.boot.loader.archive.JarFileArchive: org.springframework.boot.loader.jar.JarFile jarFile>	[<org.springframework.boot.loader.Launcher: org.springframework.boot.loader.archive.Archive createArchive()>/new org.springframework.boot.loader.archive.ExplodedArchive/0]	<org.springframework.boot.loader.archive.ExplodedArchive: org.springframework.boot.loader.archive.Archive getNestedArchive(org.springframework.boot.loader.archive.Archive$Entry)>/new org.springframework.boot.loader.archive.JarFileArchive/0
[<org.springframework.boot.loader.archive.JarFileArchive: org.springframework.boot.loader.archive.Archive getUnpackedNestedArchive(org.springframework.boot.loader.jar.JarEntryData)>/new org.springframework.boot.loader.archive.JarFileArchive/0]	<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0	<org.springframework.boot.loader.archive.JarFileArchive: org.springframework.boot.loader.jar.JarFile jarFile>	[<org.springframework.boot.loader.Launcher: org.springframework.boot.loader.archive.Archive createArchive()>/new org.springframework.boot.loader.archive.JarFileArchive/0]	<org.springframework.boot.loader.archive.JarFileArchive: org.springframework.boot.loader.archive.Archive getUnpackedNestedArchive(org.springframework.boot.loader.jar.JarEntryData)>/new org.springframework.boot.loader.archive.JarFileArchive/0
[<org.springframework.boot.loader.Launcher: org.springframework.boot.loader.archive.Archive createArchive()>/new org.springframework.boot.loader.archive.JarFileArchive/0]	<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0	<org.springframework.boot.loader.archive.JarFileArchive: org.springframework.boot.loader.jar.JarFile jarFile>	[<org.springframework.boot.loader.JarLauncher: void main(java.lang.String[])>/new org.springframework.boot.loader.JarLauncher/0]	<org.springframework.boot.loader.Launcher: org.springframework.boot.loader.archive.Archive createArchive()>/new org.springframework.boot.loader.archive.JarFileArchive/0
[<<immutable-hcontext>>]	java.lang.String::MockObject	<smpl.ordering.models.DealerInfo: java.lang.String name>	[<<immutable-hcontext>>]	smpl.ordering.models.DealerInfo::MockObject
[<org.springframework.boot.loader.data.RandomAccessDataFile: void <init>(java.io.File,int)>/new org.springframework.boot.loader.data.RandomAccessDataFile$FilePool/0]	<org.springframework.boot.loader.data.RandomAccessDataFile$FilePool: void <init>(org.springframework.boot.loader.data.RandomAccessDataFile,int)>/new java.util.concurrent.Semaphore/0	<org.springframework.boot.loader.data.RandomAccessDataFile$FilePool: java.util.concurrent.Semaphore available>	[<org.springframework.boot.loader.jar.JarFile: void <init>(java.io.File)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0]	<org.springframework.boot.loader.data.RandomAccessDataFile: void <init>(java.io.File,int)>/new org.springframework.boot.loader.data.RandomAccessDataFile$FilePool/0
[<org.springframework.boot.loader.data.RandomAccessDataFile: void <init>(java.io.File,int)>/new org.springframework.boot.loader.data.RandomAccessDataFile$FilePool/0]	<org.springframework.boot.loader.data.RandomAccessDataFile$FilePool: void <init>(org.springframework.boot.loader.data.RandomAccessDataFile,int)>/new java.util.concurrent.ConcurrentLinkedQueue/0	<org.springframework.boot.loader.data.RandomAccessDataFile$FilePool: java.util.Queue files>	[<org.springframework.boot.loader.jar.JarFile: void <init>(java.io.File)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0]	<org.springframework.boot.loader.data.RandomAccessDataFile: void <init>(java.io.File,int)>/new org.springframework.boot.loader.data.RandomAccessDataFile$FilePool/0
[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarFile: void <init>(java.io.File)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0	<org.springframework.boot.loader.data.RandomAccessDataFile$FilePool: org.springframework.boot.loader.data.RandomAccessDataFile this$0>	[<org.springframework.boot.loader.jar.JarFile: void <init>(java.io.File)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0]	<org.springframework.boot.loader.data.RandomAccessDataFile: void <init>(java.io.File,int)>/new org.springframework.boot.loader.data.RandomAccessDataFile$FilePool/0
[<<immutable-hcontext>>]	java.lang.String::MockObject	<smpl.ordering.repositories.mongodb.models.Dealer: java.lang.String name>	[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoDealersRepository/0]	<smpl.ordering.repositories.mongodb.MongoDealersRepository: boolean upsertDealer(smpl.ordering.models.DealerInfo,java.lang.String)>/new smpl.ordering.repositories.mongodb.models.Dealer/0
[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoDealersRepository/0]	<smpl.ordering.repositories.mongodb.MongoDealersRepository: void <init>(org.springframework.data.mongodb.core.MongoTemplate)>/new smpl.ordering.repositories.mongodb.MongoOperationsWithRetry/0	<smpl.ordering.repositories.mongodb.MongoDealersRepository: org.springframework.data.mongodb.core.MongoOperations operations>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoDealersRepository/0
[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoDealersRepository/0]	<smpl.ordering.repositories.mongodb.MongoDealersRepository: void <init>(org.springframework.data.mongodb.core.MongoTemplate)>/new smpl.ordering.repositories.mongodb.MongoOperationsWithRetry/0	<smpl.ordering.repositories.mongodb.MongoDealersRepository: org.springframework.data.mongodb.core.MongoOperations operations>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoDealersRepository/0
[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoDealersRepository/0]	<smpl.ordering.repositories.mongodb.MongoDealersRepository: void <init>(org.springframework.data.mongodb.core.MongoTemplate)>/new smpl.ordering.repositories.mongodb.MongoOperationsWithRetry/0	<smpl.ordering.repositories.mongodb.MongoDealersRepository: org.springframework.data.mongodb.core.MongoOperations operations>	[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoDealersRepository/0
[<<immutable-hcontext>>]	<org.springframework.boot.loader.jar.Bytes: byte[] get(java.io.InputStream,long)>/new byte[]/0	<org.springframework.boot.loader.util.AsciiBytes: byte[] bytes>	[<org.springframework.boot.loader.jar.JarEntryData: org.springframework.boot.loader.jar.JarEntryData fromInputStream(org.springframework.boot.loader.jar.JarFile,java.io.InputStream)>/new org.springframework.boot.loader.jar.JarEntryData/0]	<org.springframework.boot.loader.jar.JarEntryData: void <init>(org.springframework.boot.loader.jar.JarFile,byte[],java.io.InputStream)>/new org.springframework.boot.loader.util.AsciiBytes/0
[<<immutable-hcontext>>]	<org.springframework.boot.loader.jar.Bytes: void <clinit>()>/new byte[]/0	<org.springframework.boot.loader.util.AsciiBytes: byte[] bytes>	[<org.springframework.boot.loader.jar.JarEntryData: org.springframework.boot.loader.jar.JarEntryData fromInputStream(org.springframework.boot.loader.jar.JarFile,java.io.InputStream)>/new org.springframework.boot.loader.jar.JarEntryData/0]	<org.springframework.boot.loader.jar.JarEntryData: void <init>(org.springframework.boot.loader.jar.JarFile,byte[],java.io.InputStream)>/new org.springframework.boot.loader.util.AsciiBytes/0
[<<immutable-hcontext>>]	<org.springframework.boot.loader.jar.Bytes: byte[] get(java.io.InputStream,long)>/new byte[]/0	<org.springframework.boot.loader.util.AsciiBytes: byte[] bytes>	[<org.springframework.boot.loader.jar.JarEntryData: org.springframework.boot.loader.jar.JarEntryData fromInputStream(org.springframework.boot.loader.jar.JarFile,java.io.InputStream)>/new org.springframework.boot.loader.jar.JarEntryData/0]	<org.springframework.boot.loader.jar.JarEntryData: void <init>(org.springframework.boot.loader.jar.JarFile,byte[],java.io.InputStream)>/new org.springframework.boot.loader.util.AsciiBytes/1
[<<immutable-hcontext>>]	<org.springframework.boot.loader.jar.Bytes: void <clinit>()>/new byte[]/0	<org.springframework.boot.loader.util.AsciiBytes: byte[] bytes>	[<org.springframework.boot.loader.jar.JarEntryData: org.springframework.boot.loader.jar.JarEntryData fromInputStream(org.springframework.boot.loader.jar.JarFile,java.io.InputStream)>/new org.springframework.boot.loader.jar.JarEntryData/0]	<org.springframework.boot.loader.jar.JarEntryData: void <init>(org.springframework.boot.loader.jar.JarFile,byte[],java.io.InputStream)>/new org.springframework.boot.loader.util.AsciiBytes/1
[<<immutable-hcontext>>]	<<string-constant>>	<org.springframework.boot.loader.util.AsciiBytes: java.lang.String string>	[<<immutable-context>>]	<org.springframework.boot.loader.archive.ExplodedArchive: void <clinit>()>/new org.springframework.boot.loader.util.AsciiBytes/0
[<<immutable-hcontext>>]	<<string-constant>>	<org.springframework.boot.loader.util.AsciiBytes: java.lang.String string>	[<<immutable-context>>]	<org.springframework.boot.loader.jar.JarEntryData: void <clinit>()>/new org.springframework.boot.loader.util.AsciiBytes/0
[<<immutable-hcontext>>]	<<string-constant>>	<org.springframework.boot.loader.util.AsciiBytes: java.lang.String string>	[<<immutable-context>>]	<org.springframework.boot.loader.JarLauncher: void <clinit>()>/new org.springframework.boot.loader.util.AsciiBytes/0
[<<immutable-hcontext>>]	<<string-constant>>	<org.springframework.boot.loader.util.AsciiBytes: java.lang.String string>	[<<immutable-context>>]	<org.springframework.boot.loader.archive.JarFileArchive: void <clinit>()>/new org.springframework.boot.loader.util.AsciiBytes/0
[<<immutable-hcontext>>]	<<string-constant>>	<org.springframework.boot.loader.util.AsciiBytes: java.lang.String string>	[<<immutable-context>>]	<org.springframework.boot.loader.jar.JarFile: void <clinit>()>/new org.springframework.boot.loader.util.AsciiBytes/0
[<<immutable-hcontext>>]	<<string-constant>>	<org.springframework.boot.loader.util.AsciiBytes: java.lang.String string>	[<<immutable-context>>]	<org.springframework.boot.loader.jar.JarFile: void <clinit>()>/new org.springframework.boot.loader.util.AsciiBytes/1
[<<immutable-hcontext>>]	<<string-constant>>	<org.springframework.boot.loader.util.AsciiBytes: java.lang.String string>	[<<immutable-context>>]	<org.springframework.boot.loader.jar.JarFile: void <clinit>()>/new org.springframework.boot.loader.util.AsciiBytes/2
[<<immutable-hcontext>>]	<<string-constant>>	<org.springframework.boot.loader.util.AsciiBytes: java.lang.String string>	[<<immutable-context>>]	<org.springframework.boot.loader.jar.JarFile: void <clinit>()>/new org.springframework.boot.loader.util.AsciiBytes/3
[<smpl.ordering.repositories.mongodb.MongoShipmentRepository: smpl.ordering.models.ShipmentRecord createShipment(smpl.ordering.models.ShipmentRecord)>/new smpl.ordering.models.ShipmentRecord/0]	<smpl.ordering.models.ShipmentRecord: void <init>(smpl.ordering.models.ShipmentRecord)>/new java.util.ArrayList/0	<smpl.ordering.models.ShipmentRecord: java.util.List events>	[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoShipmentRepository/0]	<smpl.ordering.repositories.mongodb.MongoShipmentRepository: smpl.ordering.models.ShipmentRecord createShipment(smpl.ordering.models.ShipmentRecord)>/new smpl.ordering.models.ShipmentRecord/0
[<smpl.ordering.repositories.mock.MockShipmentRepository: java.util.List getShipments(smpl.ordering.models.OrderStatus)>/new smpl.ordering.models.ShipmentRecord/0]	<smpl.ordering.models.ShipmentRecord: void <init>(smpl.ordering.models.ShipmentRecord)>/new java.util.ArrayList/0	<smpl.ordering.models.ShipmentRecord: java.util.List events>	[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockShipmentRepository/0]	<smpl.ordering.repositories.mock.MockShipmentRepository: java.util.List getShipments(smpl.ordering.models.OrderStatus)>/new smpl.ordering.models.ShipmentRecord/0
[<smpl.ordering.repositories.mock.MockShipmentRepository: java.util.List getShipments(smpl.ordering.models.OrderStatus)>/new smpl.ordering.models.ShipmentRecord/1]	<smpl.ordering.models.ShipmentRecord: void <init>(smpl.ordering.models.ShipmentRecord)>/new java.util.ArrayList/0	<smpl.ordering.models.ShipmentRecord: java.util.List events>	[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockShipmentRepository/0]	<smpl.ordering.repositories.mock.MockShipmentRepository: java.util.List getShipments(smpl.ordering.models.OrderStatus)>/new smpl.ordering.models.ShipmentRecord/1
[<smpl.ordering.repositories.mock.MockShipmentRepository: smpl.ordering.models.ShipmentRecord getShipmentById(java.lang.String)>/new smpl.ordering.models.ShipmentRecord/0]	<smpl.ordering.models.ShipmentRecord: void <init>(smpl.ordering.models.ShipmentRecord)>/new java.util.ArrayList/0	<smpl.ordering.models.ShipmentRecord: java.util.List events>	[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockShipmentRepository/0]	<smpl.ordering.repositories.mock.MockShipmentRepository: smpl.ordering.models.ShipmentRecord getShipmentById(java.lang.String)>/new smpl.ordering.models.ShipmentRecord/0
[<smpl.ordering.repositories.mock.MockShipmentRepository: smpl.ordering.models.ShipmentRecord createShipment(smpl.ordering.models.ShipmentRecord)>/new smpl.ordering.models.ShipmentRecord/0]	<smpl.ordering.models.ShipmentRecord: void <init>(smpl.ordering.models.ShipmentRecord)>/new java.util.ArrayList/0	<smpl.ordering.models.ShipmentRecord: java.util.List events>	[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockShipmentRepository/0]	<smpl.ordering.repositories.mock.MockShipmentRepository: smpl.ordering.models.ShipmentRecord createShipment(smpl.ordering.models.ShipmentRecord)>/new smpl.ordering.models.ShipmentRecord/0
[<smpl.ordering.repositories.mock.MockShipmentRepository: boolean updateShipment(smpl.ordering.models.ShipmentRecord)>/new smpl.ordering.models.ShipmentRecord/0]	<smpl.ordering.models.ShipmentRecord: void <init>(smpl.ordering.models.ShipmentRecord)>/new java.util.ArrayList/0	<smpl.ordering.models.ShipmentRecord: java.util.List events>	[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockShipmentRepository/0]	<smpl.ordering.repositories.mock.MockShipmentRepository: boolean updateShipment(smpl.ordering.models.ShipmentRecord)>/new smpl.ordering.models.ShipmentRecord/0
[<<immutable-context>>]	<smpl.ordering.models.ShipmentRecord: void <init>()>/new java.util.ArrayList/0	<smpl.ordering.models.ShipmentRecord: java.util.List events>	[<<immutable-hcontext>>]	smpl.ordering.models.ShipmentRecord::MockObject
[<<immutable-context>>]	<smpl.ordering.models.ShipmentRecord: void <init>(smpl.ordering.models.ShipmentRecord)>/new java.util.ArrayList/0	<smpl.ordering.models.ShipmentRecord: java.util.List events>	[<<immutable-hcontext>>]	smpl.ordering.models.ShipmentRecord::MockObject
[<<immutable-hcontext>>]	smpl.ordering.models.OrderStatus::MockObject	<smpl.ordering.models.OrderUpdateInfo: smpl.ordering.models.OrderStatus status>	[<<immutable-hcontext>>]	smpl.ordering.models.OrderUpdateInfo::MockObject
[<<immutable-context>>]	<smpl.ordering.models.OrderUpdateInfo: void <init>(smpl.ordering.models.OrderStatus,java.lang.String)>/new smpl.ordering.models.OrderEventInfo/0	<smpl.ordering.models.OrderUpdateInfo: smpl.ordering.models.OrderEventInfo eventInfo>	[<<immutable-hcontext>>]	smpl.ordering.models.OrderUpdateInfo::MockObject
[<org.springframework.boot.loader.data.RandomAccessDataFile: java.io.InputStream getInputStream(org.springframework.boot.loader.data.RandomAccessData$ResourceAccess)>/new org.springframework.boot.loader.data.RandomAccessDataFile$DataInputStream/0]	<org.springframework.boot.loader.data.RandomAccessDataFile$DataInputStream: void <init>(org.springframework.boot.loader.data.RandomAccessDataFile,org.springframework.boot.loader.data.RandomAccessData$ResourceAccess)>/new java.io.RandomAccessFile/0	<org.springframework.boot.loader.data.RandomAccessDataFile$DataInputStream: java.io.RandomAccessFile file>	[<org.springframework.boot.loader.data.RandomAccessDataFile: org.springframework.boot.loader.data.RandomAccessData getSubsection(long,long)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0]	<org.springframework.boot.loader.data.RandomAccessDataFile: java.io.InputStream getInputStream(org.springframework.boot.loader.data.RandomAccessData$ResourceAccess)>/new org.springframework.boot.loader.data.RandomAccessDataFile$DataInputStream/0
[<org.springframework.boot.loader.jar.JarFile: void <init>(java.io.File)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0]	<org.springframework.boot.loader.data.RandomAccessDataFile: org.springframework.boot.loader.data.RandomAccessData getSubsection(long,long)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0	<org.springframework.boot.loader.data.RandomAccessDataFile$DataInputStream: org.springframework.boot.loader.data.RandomAccessDataFile this$0>	[<org.springframework.boot.loader.data.RandomAccessDataFile: org.springframework.boot.loader.data.RandomAccessData getSubsection(long,long)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0]	<org.springframework.boot.loader.data.RandomAccessDataFile: java.io.InputStream getInputStream(org.springframework.boot.loader.data.RandomAccessData$ResourceAccess)>/new org.springframework.boot.loader.data.RandomAccessDataFile$DataInputStream/0
[<org.springframework.boot.loader.data.RandomAccessDataFile: org.springframework.boot.loader.data.RandomAccessData getSubsection(long,long)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0]	<org.springframework.boot.loader.data.RandomAccessDataFile: org.springframework.boot.loader.data.RandomAccessData getSubsection(long,long)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0	<org.springframework.boot.loader.data.RandomAccessDataFile$DataInputStream: org.springframework.boot.loader.data.RandomAccessDataFile this$0>	[<org.springframework.boot.loader.data.RandomAccessDataFile: org.springframework.boot.loader.data.RandomAccessData getSubsection(long,long)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0]	<org.springframework.boot.loader.data.RandomAccessDataFile: java.io.InputStream getInputStream(org.springframework.boot.loader.data.RandomAccessData$ResourceAccess)>/new org.springframework.boot.loader.data.RandomAccessDataFile$DataInputStream/0
[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoCatalogItemsRepository/0]	<smpl.ordering.repositories.mongodb.MongoCatalogItemsRepository: void <init>(org.springframework.data.mongodb.core.MongoTemplate)>/new smpl.ordering.repositories.mongodb.MongoOperationsWithRetry/0	<smpl.ordering.repositories.mongodb.MongoCatalogItemsRepository: org.springframework.data.mongodb.core.MongoOperations operations>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoCatalogItemsRepository/0
[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoCatalogItemsRepository/0]	<smpl.ordering.repositories.mongodb.MongoCatalogItemsRepository: void <init>(org.springframework.data.mongodb.core.MongoTemplate)>/new smpl.ordering.repositories.mongodb.MongoOperationsWithRetry/0	<smpl.ordering.repositories.mongodb.MongoCatalogItemsRepository: org.springframework.data.mongodb.core.MongoOperations operations>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoCatalogItemsRepository/0
[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoCatalogItemsRepository/0]	<smpl.ordering.repositories.mongodb.MongoCatalogItemsRepository: void <init>(org.springframework.data.mongodb.core.MongoTemplate)>/new smpl.ordering.repositories.mongodb.MongoOperationsWithRetry/0	<smpl.ordering.repositories.mongodb.MongoCatalogItemsRepository: org.springframework.data.mongodb.core.MongoOperations operations>	[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoCatalogItemsRepository/0
[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarFile: void <init>(java.io.File)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0	<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.data.RandomAccessDataFile rootFile>	[<org.springframework.boot.loader.archive.JarFileArchive: org.springframework.boot.loader.archive.Archive getUnpackedNestedArchive(org.springframework.boot.loader.jar.JarEntryData)>/new org.springframework.boot.loader.archive.JarFileArchive/0]	<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0
[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarFile: void <init>(java.io.File)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0	<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.data.RandomAccessDataFile rootFile>	[<org.springframework.boot.loader.Launcher: org.springframework.boot.loader.archive.Archive createArchive()>/new org.springframework.boot.loader.archive.JarFileArchive/0]	<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0
[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarFile: void <init>(java.io.File)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0	<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.data.RandomAccessDataFile rootFile>	[<org.springframework.boot.loader.archive.ExplodedArchive: org.springframework.boot.loader.archive.Archive getNestedArchive(org.springframework.boot.loader.archive.Archive$Entry)>/new org.springframework.boot.loader.archive.JarFileArchive/0]	<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0
[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarFile: void <init>(java.io.File)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0	<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.data.RandomAccessDataFile rootFile>	[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.jar.JarFile createJarFileFromDirectoryEntry(org.springframework.boot.loader.jar.JarEntryData)>/new org.springframework.boot.loader.jar.JarFile/0
[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarFile: void <init>(java.io.File)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0	<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.data.RandomAccessDataFile rootFile>	[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.jar.JarFile createJarFileFromFileEntry(org.springframework.boot.loader.jar.JarEntryData)>/new org.springframework.boot.loader.jar.JarFile/0
[<<immutable-hcontext>>]	<<string-constant>>	<org.springframework.boot.loader.jar.JarFile: java.lang.String pathFromRoot>	[<org.springframework.boot.loader.archive.JarFileArchive: org.springframework.boot.loader.archive.Archive getUnpackedNestedArchive(org.springframework.boot.loader.jar.JarEntryData)>/new org.springframework.boot.loader.archive.JarFileArchive/0]	<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0
[<<immutable-hcontext>>]	<<string-constant>>	<org.springframework.boot.loader.jar.JarFile: java.lang.String pathFromRoot>	[<org.springframework.boot.loader.Launcher: org.springframework.boot.loader.archive.Archive createArchive()>/new org.springframework.boot.loader.archive.JarFileArchive/0]	<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0
[<<immutable-hcontext>>]	<<string-constant>>	<org.springframework.boot.loader.jar.JarFile: java.lang.String pathFromRoot>	[<org.springframework.boot.loader.archive.ExplodedArchive: org.springframework.boot.loader.archive.Archive getNestedArchive(org.springframework.boot.loader.archive.Archive$Entry)>/new org.springframework.boot.loader.archive.JarFileArchive/0]	<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0
[<org.springframework.boot.loader.jar.JarFile: void <init>(java.io.File)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0]	<org.springframework.boot.loader.data.RandomAccessDataFile: org.springframework.boot.loader.data.RandomAccessData getSubsection(long,long)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0	<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.data.RandomAccessData data>	[<org.springframework.boot.loader.archive.JarFileArchive: org.springframework.boot.loader.archive.Archive getUnpackedNestedArchive(org.springframework.boot.loader.jar.JarEntryData)>/new org.springframework.boot.loader.archive.JarFileArchive/0]	<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0
[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarFile: void <init>(java.io.File)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0	<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.data.RandomAccessData data>	[<org.springframework.boot.loader.archive.JarFileArchive: org.springframework.boot.loader.archive.Archive getUnpackedNestedArchive(org.springframework.boot.loader.jar.JarEntryData)>/new org.springframework.boot.loader.archive.JarFileArchive/0]	<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0
[<org.springframework.boot.loader.jar.JarFile: void <init>(java.io.File)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0]	<org.springframework.boot.loader.data.RandomAccessDataFile: org.springframework.boot.loader.data.RandomAccessData getSubsection(long,long)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0	<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.data.RandomAccessData data>	[<org.springframework.boot.loader.Launcher: org.springframework.boot.loader.archive.Archive createArchive()>/new org.springframework.boot.loader.archive.JarFileArchive/0]	<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0
[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarFile: void <init>(java.io.File)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0	<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.data.RandomAccessData data>	[<org.springframework.boot.loader.Launcher: org.springframework.boot.loader.archive.Archive createArchive()>/new org.springframework.boot.loader.archive.JarFileArchive/0]	<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0
[<org.springframework.boot.loader.jar.JarFile: void <init>(java.io.File)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0]	<org.springframework.boot.loader.data.RandomAccessDataFile: org.springframework.boot.loader.data.RandomAccessData getSubsection(long,long)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0	<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.data.RandomAccessData data>	[<org.springframework.boot.loader.archive.ExplodedArchive: org.springframework.boot.loader.archive.Archive getNestedArchive(org.springframework.boot.loader.archive.Archive$Entry)>/new org.springframework.boot.loader.archive.JarFileArchive/0]	<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0
[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarFile: void <init>(java.io.File)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0	<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.data.RandomAccessData data>	[<org.springframework.boot.loader.archive.ExplodedArchive: org.springframework.boot.loader.archive.Archive getNestedArchive(org.springframework.boot.loader.archive.Archive$Entry)>/new org.springframework.boot.loader.archive.JarFileArchive/0]	<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0
[<org.springframework.boot.loader.jar.JarFile: void <init>(java.io.File)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0]	<org.springframework.boot.loader.data.RandomAccessDataFile: org.springframework.boot.loader.data.RandomAccessData getSubsection(long,long)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0	<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.data.RandomAccessData data>	[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.jar.JarFile createJarFileFromDirectoryEntry(org.springframework.boot.loader.jar.JarEntryData)>/new org.springframework.boot.loader.jar.JarFile/0
[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarFile: void <init>(java.io.File)>/new org.springframework.boot.loader.data.RandomAccessDataFile/0	<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.data.RandomAccessData data>	[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.jar.JarFile createJarFileFromDirectoryEntry(org.springframework.boot.loader.jar.JarEntryData)>/new org.springframework.boot.loader.jar.JarFile/0
[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarFile: java.util.List loadJarEntries(org.springframework.boot.loader.jar.CentralDirectoryEndRecord)>/new java.util.ArrayList/0	<org.springframework.boot.loader.jar.JarFile: java.util.List entries>	[<org.springframework.boot.loader.archive.JarFileArchive: org.springframework.boot.loader.archive.Archive getUnpackedNestedArchive(org.springframework.boot.loader.jar.JarEntryData)>/new org.springframework.boot.loader.archive.JarFileArchive/0]	<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0
[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarFile: java.util.List loadJarEntries(org.springframework.boot.loader.jar.CentralDirectoryEndRecord)>/new java.util.ArrayList/0	<org.springframework.boot.loader.jar.JarFile: java.util.List entries>	[<org.springframework.boot.loader.Launcher: org.springframework.boot.loader.archive.Archive createArchive()>/new org.springframework.boot.loader.archive.JarFileArchive/0]	<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0
[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarFile: java.util.List loadJarEntries(org.springframework.boot.loader.jar.CentralDirectoryEndRecord)>/new java.util.ArrayList/0	<org.springframework.boot.loader.jar.JarFile: java.util.List entries>	[<org.springframework.boot.loader.archive.ExplodedArchive: org.springframework.boot.loader.archive.Archive getNestedArchive(org.springframework.boot.loader.archive.Archive$Entry)>/new org.springframework.boot.loader.archive.JarFileArchive/0]	<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0
[<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.jar.JarFile createJarFileFromDirectoryEntry(org.springframework.boot.loader.jar.JarEntryData)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarFile: java.util.List filterEntries(java.util.List,org.springframework.boot.loader.jar.JarEntryFilter[])>/new java.util.ArrayList/0	<org.springframework.boot.loader.jar.JarFile: java.util.List entries>	[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.jar.JarFile createJarFileFromDirectoryEntry(org.springframework.boot.loader.jar.JarEntryData)>/new org.springframework.boot.loader.jar.JarFile/0
[<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.jar.JarFile createJarFileFromFileEntry(org.springframework.boot.loader.jar.JarEntryData)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarFile: java.util.List loadJarEntries(org.springframework.boot.loader.jar.CentralDirectoryEndRecord)>/new java.util.ArrayList/0	<org.springframework.boot.loader.jar.JarFile: java.util.List entries>	[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.jar.JarFile createJarFileFromFileEntry(org.springframework.boot.loader.jar.JarEntryData)>/new org.springframework.boot.loader.jar.JarFile/0
[<<immutable-hcontext>>]	<<null pseudo heap>>	<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.jar.JarEntryData manifestEntry>	[<org.springframework.boot.loader.archive.JarFileArchive: org.springframework.boot.loader.archive.Archive getUnpackedNestedArchive(org.springframework.boot.loader.jar.JarEntryData)>/new org.springframework.boot.loader.archive.JarFileArchive/0]	<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0
[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarEntryData: org.springframework.boot.loader.jar.JarEntryData fromInputStream(org.springframework.boot.loader.jar.JarFile,java.io.InputStream)>/new org.springframework.boot.loader.jar.JarEntryData/0	<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.jar.JarEntryData manifestEntry>	[<org.springframework.boot.loader.archive.JarFileArchive: org.springframework.boot.loader.archive.Archive getUnpackedNestedArchive(org.springframework.boot.loader.jar.JarEntryData)>/new org.springframework.boot.loader.archive.JarFileArchive/0]	<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0
[<<immutable-hcontext>>]	<<null pseudo heap>>	<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.jar.JarEntryData manifestEntry>	[<org.springframework.boot.loader.Launcher: org.springframework.boot.loader.archive.Archive createArchive()>/new org.springframework.boot.loader.archive.JarFileArchive/0]	<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0
[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarEntryData: org.springframework.boot.loader.jar.JarEntryData fromInputStream(org.springframework.boot.loader.jar.JarFile,java.io.InputStream)>/new org.springframework.boot.loader.jar.JarEntryData/0	<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.jar.JarEntryData manifestEntry>	[<org.springframework.boot.loader.Launcher: org.springframework.boot.loader.archive.Archive createArchive()>/new org.springframework.boot.loader.archive.JarFileArchive/0]	<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0
[<<immutable-hcontext>>]	<<null pseudo heap>>	<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.jar.JarEntryData manifestEntry>	[<org.springframework.boot.loader.archive.ExplodedArchive: org.springframework.boot.loader.archive.Archive getNestedArchive(org.springframework.boot.loader.archive.Archive$Entry)>/new org.springframework.boot.loader.archive.JarFileArchive/0]	<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0
[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarEntryData: org.springframework.boot.loader.jar.JarEntryData fromInputStream(org.springframework.boot.loader.jar.JarFile,java.io.InputStream)>/new org.springframework.boot.loader.jar.JarEntryData/0	<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.jar.JarEntryData manifestEntry>	[<org.springframework.boot.loader.archive.ExplodedArchive: org.springframework.boot.loader.archive.Archive getNestedArchive(org.springframework.boot.loader.archive.Archive$Entry)>/new org.springframework.boot.loader.archive.JarFileArchive/0]	<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0
[<<immutable-hcontext>>]	<<null pseudo heap>>	<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.jar.JarEntryData manifestEntry>	[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.jar.JarFile createJarFileFromFileEntry(org.springframework.boot.loader.jar.JarEntryData)>/new org.springframework.boot.loader.jar.JarFile/0
[<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.jar.JarFile createJarFileFromFileEntry(org.springframework.boot.loader.jar.JarEntryData)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarEntryData: org.springframework.boot.loader.jar.JarEntryData fromInputStream(org.springframework.boot.loader.jar.JarFile,java.io.InputStream)>/new org.springframework.boot.loader.jar.JarEntryData/0	<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.jar.JarEntryData manifestEntry>	[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarFile: org.springframework.boot.loader.jar.JarFile createJarFileFromFileEntry(org.springframework.boot.loader.jar.JarEntryData)>/new org.springframework.boot.loader.jar.JarFile/0
[<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0]	<org.springframework.boot.loader.jar.JarFile: java.util.jar.Manifest getManifest()>/new java.lang.ref.SoftReference/0	<org.springframework.boot.loader.jar.JarFile: java.lang.ref.SoftReference manifest>	[<org.springframework.boot.loader.Launcher: org.springframework.boot.loader.archive.Archive createArchive()>/new org.springframework.boot.loader.archive.JarFileArchive/0]	<org.springframework.boot.loader.archive.JarFileArchive: void <init>(java.io.File,java.net.URL)>/new org.springframework.boot.loader.jar.JarFile/0
[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoOrderRepository/0	<smpl.ordering.repositories.mongodb.MongoShipmentRepository: smpl.ordering.repositories.OrderRepository orders>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoShipmentRepository/0
[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoOrderRepository/0	<smpl.ordering.repositories.mongodb.MongoShipmentRepository: smpl.ordering.repositories.OrderRepository orders>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoShipmentRepository/0
[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoOrderRepository/0	<smpl.ordering.repositories.mongodb.MongoShipmentRepository: smpl.ordering.repositories.OrderRepository orders>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoShipmentRepository/0
[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoOrderRepository/0	<smpl.ordering.repositories.mongodb.MongoShipmentRepository: smpl.ordering.repositories.OrderRepository orders>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoShipmentRepository/0
[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoOrderRepository/0	<smpl.ordering.repositories.mongodb.MongoShipmentRepository: smpl.ordering.repositories.OrderRepository orders>	[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoShipmentRepository/0
[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoShipmentRepository/0]	<smpl.ordering.repositories.mongodb.MongoShipmentRepository: void <init>(org.springframework.data.mongodb.core.MongoTemplate,smpl.ordering.repositories.OrderRepository)>/new smpl.ordering.repositories.mongodb.MongoOperationsWithRetry/0	<smpl.ordering.repositories.mongodb.MongoShipmentRepository: org.springframework.data.mongodb.core.MongoOperations operations>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoShipmentRepository/0
[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoShipmentRepository/0]	<smpl.ordering.repositories.mongodb.MongoShipmentRepository: void <init>(org.springframework.data.mongodb.core.MongoTemplate,smpl.ordering.repositories.OrderRepository)>/new smpl.ordering.repositories.mongodb.MongoOperationsWithRetry/0	<smpl.ordering.repositories.mongodb.MongoShipmentRepository: org.springframework.data.mongodb.core.MongoOperations operations>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoShipmentRepository/0
[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoShipmentRepository/0]	<smpl.ordering.repositories.mongodb.MongoShipmentRepository: void <init>(org.springframework.data.mongodb.core.MongoTemplate,smpl.ordering.repositories.OrderRepository)>/new smpl.ordering.repositories.mongodb.MongoOperationsWithRetry/0	<smpl.ordering.repositories.mongodb.MongoShipmentRepository: org.springframework.data.mongodb.core.MongoOperations operations>	[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoShipmentRepository/0
[<<immutable-hcontext>>]	java.lang.String::MockObject	<smpl.ordering.models.ShipmentEventInfo: java.lang.String date>	[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockShipmentRepository/0]	<smpl.ordering.repositories.mock.MockShipmentRepository: boolean addEvent(java.lang.String,smpl.ordering.models.ShipmentEventInfo)>/new smpl.ordering.models.ShipmentEventInfo/0
[<<immutable-hcontext>>]	java.lang.String::MockObject	<smpl.ordering.models.ShipmentEventInfo: java.lang.String date>	[<<immutable-hcontext>>]	smpl.ordering.models.ShipmentEventInfo::MockObject
[<<immutable-hcontext>>]	java.lang.String::MockObject	<smpl.ordering.models.ShipmentEventInfo: java.lang.String comments>	[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockShipmentRepository/0]	<smpl.ordering.repositories.mock.MockShipmentRepository: boolean addEvent(java.lang.String,smpl.ordering.models.ShipmentEventInfo)>/new smpl.ordering.models.ShipmentEventInfo/0
[<<immutable-hcontext>>]	java.lang.String::MockObject	<smpl.ordering.models.ShipmentEventInfo: java.lang.String comments>	[<<immutable-hcontext>>]	smpl.ordering.models.ShipmentEventInfo::MockObject
[<<immutable-hcontext>>]	java.lang.String::MockObject	<smpl.ordering.models.OrderEventInfo: java.lang.String date>	[<<immutable-hcontext>>]	smpl.ordering.models.OrderEventInfo::MockObject
[<<immutable-hcontext>>]	java.lang.String::MockObject	<smpl.ordering.models.OrderEventInfo: java.lang.String comments>	[<<immutable-context>>]	<smpl.ordering.models.OrderUpdateInfo: void <init>(smpl.ordering.models.OrderStatus,java.lang.String)>/new smpl.ordering.models.OrderEventInfo/0
[<<immutable-hcontext>>]	java.lang.String::MockObject	<smpl.ordering.models.OrderEventInfo: java.lang.String comments>	[<<immutable-hcontext>>]	smpl.ordering.models.OrderEventInfo::MockObject
[<<immutable-hcontext>>]	java.lang.String::MockObject	<smpl.ordering.repositories.mongodb.models.CatalogItem: java.lang.String skuNumber>	[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoCatalogItemsRepository/0]	<smpl.ordering.repositories.mongodb.MongoCatalogItemsRepository: boolean upsertCatalogItem(java.lang.String,smpl.ordering.models.CatalogItem,java.lang.String)>/new smpl.ordering.repositories.mongodb.models.CatalogItem/0
[<<immutable-hcontext>>]	java.lang.String::MockObject	<smpl.ordering.repositories.mongodb.models.CatalogItem: java.lang.String description>	[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoCatalogItemsRepository/0]	<smpl.ordering.repositories.mongodb.MongoCatalogItemsRepository: boolean upsertCatalogItem(java.lang.String,smpl.ordering.models.CatalogItem,java.lang.String)>/new smpl.ordering.repositories.mongodb.models.CatalogItem/0
[<<immutable-hcontext>>]	<<string-constant>>	<smpl.ordering.models.CatalogItem: java.lang.String skuNumber>	[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockCatalogItemsRepository/0]	<smpl.ordering.repositories.mock.MockCatalogItemsRepository: void <init>()>/new smpl.ordering.models.CatalogItem/0
[<<immutable-hcontext>>]	<<string-constant>>	<smpl.ordering.models.CatalogItem: java.lang.String skuNumber>	[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockCatalogItemsRepository/0]	<smpl.ordering.repositories.mock.MockCatalogItemsRepository: void <init>()>/new smpl.ordering.models.CatalogItem/1
[<<immutable-hcontext>>]	<<string-constant>>	<smpl.ordering.models.CatalogItem: java.lang.String skuNumber>	[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockCatalogItemsRepository/0]	<smpl.ordering.repositories.mock.MockCatalogItemsRepository: void <init>()>/new smpl.ordering.models.CatalogItem/2
[<<immutable-hcontext>>]	java.lang.String::MockObject	<smpl.ordering.models.CatalogItem: java.lang.String skuNumber>	[<<immutable-hcontext>>]	smpl.ordering.models.CatalogItem::MockObject
[<<immutable-hcontext>>]	<<string-constant>>	<smpl.ordering.models.CatalogItem: java.lang.String description>	[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockCatalogItemsRepository/0]	<smpl.ordering.repositories.mock.MockCatalogItemsRepository: void <init>()>/new smpl.ordering.models.CatalogItem/0
[<<immutable-hcontext>>]	<<string-constant>>	<smpl.ordering.models.CatalogItem: java.lang.String description>	[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockCatalogItemsRepository/0]	<smpl.ordering.repositories.mock.MockCatalogItemsRepository: void <init>()>/new smpl.ordering.models.CatalogItem/1
[<<immutable-hcontext>>]	<<string-constant>>	<smpl.ordering.models.CatalogItem: java.lang.String description>	[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockCatalogItemsRepository/0]	<smpl.ordering.repositories.mock.MockCatalogItemsRepository: void <init>()>/new smpl.ordering.models.CatalogItem/2
[<<immutable-hcontext>>]	java.lang.String::MockObject	<smpl.ordering.models.CatalogItem: java.lang.String description>	[<<immutable-hcontext>>]	smpl.ordering.models.CatalogItem::MockObject
[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockCatalogItemsRepository/0]	<smpl.ordering.repositories.mock.MockCatalogItemsRepository: void <init>()>/new java.util.ArrayList/0	<smpl.ordering.repositories.mock.MockCatalogItemsRepository: java.util.List catalog>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockCatalogItemsRepository/0
[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockCatalogItemsRepository/0]	<smpl.ordering.repositories.mock.MockCatalogItemsRepository: void <init>()>/new java.util.ArrayList/0	<smpl.ordering.repositories.mock.MockCatalogItemsRepository: java.util.List catalog>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockCatalogItemsRepository/0
[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockCatalogItemsRepository/0]	<smpl.ordering.repositories.mock.MockCatalogItemsRepository: void <init>()>/new java.util.ArrayList/0	<smpl.ordering.repositories.mock.MockCatalogItemsRepository: java.util.List catalog>	[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockCatalogItemsRepository/0
[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockCatalogItemsRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.CatalogItemsRepository catalogItems>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/0
[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockCatalogItemsRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.CatalogItemsRepository catalogItems>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/0
[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockCatalogItemsRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.CatalogItemsRepository catalogItems>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/0
[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockCatalogItemsRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.CatalogItemsRepository catalogItems>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/0
[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockCatalogItemsRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.CatalogItemsRepository catalogItems>	[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/0
[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoCatalogItemsRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.CatalogItemsRepository catalogItems>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/1
[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoCatalogItemsRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.CatalogItemsRepository catalogItems>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/1
[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoCatalogItemsRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.CatalogItemsRepository catalogItems>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/1
[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoCatalogItemsRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.CatalogItemsRepository catalogItems>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/1
[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoCatalogItemsRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.CatalogItemsRepository catalogItems>	[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/1
[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockDealersRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.DealersRepository dealers>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/0
[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockDealersRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.DealersRepository dealers>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/0
[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockDealersRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.DealersRepository dealers>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/0
[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockDealersRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.DealersRepository dealers>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/0
[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockDealersRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.DealersRepository dealers>	[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/0
[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoDealersRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.DealersRepository dealers>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/1
[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoDealersRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.DealersRepository dealers>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/1
[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoDealersRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.DealersRepository dealers>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/1
[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoDealersRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.DealersRepository dealers>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/1
[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoDealersRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.DealersRepository dealers>	[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/1
[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockQuoteRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.QuoteRepository quotes>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/0
[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockQuoteRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.QuoteRepository quotes>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/0
[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockQuoteRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.QuoteRepository quotes>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/0
[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockQuoteRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.QuoteRepository quotes>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/0
[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockQuoteRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.QuoteRepository quotes>	[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/0
[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoQuoteRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.QuoteRepository quotes>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/1
[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoQuoteRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.QuoteRepository quotes>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/1
[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoQuoteRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.QuoteRepository quotes>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/1
[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoQuoteRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.QuoteRepository quotes>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/1
[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoQuoteRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.QuoteRepository quotes>	[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/1
[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockOrderRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.OrderRepository orders>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/0
[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockOrderRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.OrderRepository orders>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/0
[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockOrderRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.OrderRepository orders>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/0
[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockOrderRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.OrderRepository orders>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/0
[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockOrderRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.OrderRepository orders>	[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/0
[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoOrderRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.OrderRepository orders>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/1
[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoOrderRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.OrderRepository orders>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/1
[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoOrderRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.OrderRepository orders>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/1
[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoOrderRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.OrderRepository orders>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/1
[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoOrderRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.OrderRepository orders>	[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/1
[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockShipmentRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.ShipmentRepository shipments>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/0
[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockShipmentRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.ShipmentRepository shipments>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/0
[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockShipmentRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.ShipmentRepository shipments>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/0
[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockShipmentRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.ShipmentRepository shipments>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/0
[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockShipmentRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.ShipmentRepository shipments>	[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/0
[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoShipmentRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.ShipmentRepository shipments>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/1
[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoShipmentRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.ShipmentRepository shipments>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/1
[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoShipmentRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.ShipmentRepository shipments>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/1
[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoShipmentRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.ShipmentRepository shipments>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/1
[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoShipmentRepository/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.ShipmentRepository shipments>	[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/1
[<<immutable-hcontext>>]	smpl.ordering.repositories.RepositoryFactory::MockObject	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.RepositoryFactory this$0>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/0
[<<immutable-hcontext>>]	smpl.ordering.repositories.RepositoryFactory::MockObject	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.RepositoryFactory this$0>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/0
[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.RepositoryFactory this$0>	[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/0
[<<immutable-hcontext>>]	smpl.ordering.repositories.RepositoryFactory::MockObject	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.RepositoryFactory this$0>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/1
[<<immutable-hcontext>>]	smpl.ordering.repositories.RepositoryFactory::MockObject	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.RepositoryFactory this$0>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/1
[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0	<smpl.ordering.repositories.RepositoryFactory$Repositories: smpl.ordering.repositories.RepositoryFactory this$0>	[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/1
[<<immutable-hcontext>>]	<<null pseudo heap>>	<org.springframework.boot.loader.LaunchedURLClassLoader: java.lang.ClassLoader rootClassLoader>	[<org.springframework.boot.loader.JarLauncher: void main(java.lang.String[])>/new org.springframework.boot.loader.JarLauncher/0]	<org.springframework.boot.loader.Launcher: java.lang.ClassLoader createClassLoader(java.net.URL[])>/new org.springframework.boot.loader.LaunchedURLClassLoader/0
[<org.springframework.boot.loader.Launcher: org.springframework.boot.loader.archive.Archive createArchive()>/new org.springframework.boot.loader.archive.ExplodedArchive/0]	<org.springframework.boot.loader.archive.ExplodedArchive: void buildEntries(java.io.File,boolean)>/new org.springframework.boot.loader.util.AsciiBytes/0	<org.springframework.boot.loader.archive.ExplodedArchive$FileEntry: org.springframework.boot.loader.util.AsciiBytes name>	[<org.springframework.boot.loader.Launcher: org.springframework.boot.loader.archive.Archive createArchive()>/new org.springframework.boot.loader.archive.ExplodedArchive/0]	<org.springframework.boot.loader.archive.ExplodedArchive: void buildEntries(java.io.File,boolean)>/new org.springframework.boot.loader.archive.ExplodedArchive$FileEntry/0
[<org.springframework.boot.loader.archive.ExplodedArchive: org.springframework.boot.loader.archive.Archive getNestedArchive(org.springframework.boot.loader.archive.Archive$Entry)>/new org.springframework.boot.loader.archive.ExplodedArchive/0]	<org.springframework.boot.loader.archive.ExplodedArchive: void buildEntries(java.io.File,boolean)>/new org.springframework.boot.loader.util.AsciiBytes/0	<org.springframework.boot.loader.archive.ExplodedArchive$FileEntry: org.springframework.boot.loader.util.AsciiBytes name>	[<org.springframework.boot.loader.archive.ExplodedArchive: org.springframework.boot.loader.archive.Archive getNestedArchive(org.springframework.boot.loader.archive.Archive$Entry)>/new org.springframework.boot.loader.archive.ExplodedArchive/0]	<org.springframework.boot.loader.archive.ExplodedArchive: void buildEntries(java.io.File,boolean)>/new org.springframework.boot.loader.archive.ExplodedArchive$FileEntry/0
[<org.springframework.boot.loader.JarLauncher: void main(java.lang.String[])>/new org.springframework.boot.loader.JarLauncher/0]	<org.springframework.boot.loader.Launcher: org.springframework.boot.loader.archive.Archive createArchive()>/new java.io.File/0	<org.springframework.boot.loader.archive.ExplodedArchive$FileEntry: java.io.File file>	[<org.springframework.boot.loader.Launcher: org.springframework.boot.loader.archive.Archive createArchive()>/new org.springframework.boot.loader.archive.ExplodedArchive/0]	<org.springframework.boot.loader.archive.ExplodedArchive: void buildEntries(java.io.File,boolean)>/new org.springframework.boot.loader.archive.ExplodedArchive$FileEntry/0
[<org.springframework.boot.loader.JarLauncher: void main(java.lang.String[])>/new org.springframework.boot.loader.JarLauncher/0]	<org.springframework.boot.loader.Launcher: org.springframework.boot.loader.archive.Archive createArchive()>/new org.springframework.boot.loader.archive.ExplodedArchive/0	<org.springframework.boot.loader.archive.ExplodedArchive$FileEntry: org.springframework.boot.loader.archive.ExplodedArchive this$0>	[<org.springframework.boot.loader.Launcher: org.springframework.boot.loader.archive.Archive createArchive()>/new org.springframework.boot.loader.archive.ExplodedArchive/0]	<org.springframework.boot.loader.archive.ExplodedArchive: void buildEntries(java.io.File,boolean)>/new org.springframework.boot.loader.archive.ExplodedArchive$FileEntry/0
[<org.springframework.boot.loader.Launcher: org.springframework.boot.loader.archive.Archive createArchive()>/new org.springframework.boot.loader.archive.ExplodedArchive/0]	<org.springframework.boot.loader.archive.ExplodedArchive: org.springframework.boot.loader.archive.Archive getNestedArchive(org.springframework.boot.loader.archive.Archive$Entry)>/new org.springframework.boot.loader.archive.ExplodedArchive/0	<org.springframework.boot.loader.archive.ExplodedArchive$FileEntry: org.springframework.boot.loader.archive.ExplodedArchive this$0>	[<org.springframework.boot.loader.archive.ExplodedArchive: org.springframework.boot.loader.archive.Archive getNestedArchive(org.springframework.boot.loader.archive.Archive$Entry)>/new org.springframework.boot.loader.archive.ExplodedArchive/0]	<org.springframework.boot.loader.archive.ExplodedArchive: void buildEntries(java.io.File,boolean)>/new org.springframework.boot.loader.archive.ExplodedArchive$FileEntry/0
[<<immutable-hcontext>>]	<<null pseudo heap>>	<smpl.ordering.repositories.RepositoryFactory: org.springframework.data.mongodb.core.MongoTemplate mongoTemplate>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0
[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/0	<smpl.ordering.repositories.RepositoryFactory: smpl.ordering.repositories.RepositoryFactory$Repositories mockRepos>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0
[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/0	<smpl.ordering.repositories.RepositoryFactory: smpl.ordering.repositories.RepositoryFactory$Repositories mockRepos>	[<<immutable-hcontext>>]	smpl.ordering.repositories.RepositoryFactory::MockObject
[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/0	<smpl.ordering.repositories.RepositoryFactory: smpl.ordering.repositories.RepositoryFactory$Repositories mockRepos>	[<<immutable-hcontext>>]	smpl.ordering.repositories.RepositoryFactory::MockObject
[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/1	<smpl.ordering.repositories.RepositoryFactory: smpl.ordering.repositories.RepositoryFactory$Repositories mongodbRepos>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0
[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/1	<smpl.ordering.repositories.RepositoryFactory: smpl.ordering.repositories.RepositoryFactory$Repositories mongodbRepos>	[<<immutable-hcontext>>]	smpl.ordering.repositories.RepositoryFactory::MockObject
[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory$Repositories/1	<smpl.ordering.repositories.RepositoryFactory: smpl.ordering.repositories.RepositoryFactory$Repositories mongodbRepos>	[<<immutable-hcontext>>]	smpl.ordering.repositories.RepositoryFactory::MockObject
[<<immutable-hcontext>>]	java.lang.String::MockObject	<smpl.ordering.repositories.RepositoryFactory: java.lang.String storageKind>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0
[<<immutable-hcontext>>]	java.lang.String::MockObject	<smpl.ordering.repositories.RepositoryFactory: java.lang.String storageKind>	[<<immutable-hcontext>>]	smpl.ordering.repositories.RepositoryFactory::MockObject
[<<immutable-hcontext>>]	java.lang.String::MockObject	<smpl.ordering.repositories.mongodb.models.QuoteDetails: java.lang.String quoteId>	[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoQuoteRepository/0]	<smpl.ordering.repositories.mongodb.MongoQuoteRepository: smpl.ordering.models.Quote createQuote(smpl.ordering.models.Quote)>/new smpl.ordering.repositories.mongodb.models.QuoteDetails/0
[<<immutable-hcontext>>]	java.lang.String::MockObject	<smpl.ordering.repositories.mongodb.models.QuoteDetails: java.lang.String quoteId>	[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoQuoteRepository/0]	<smpl.ordering.repositories.mongodb.MongoQuoteRepository: boolean updateQuote(java.lang.String,smpl.ordering.models.Quote,java.lang.String)>/new smpl.ordering.repositories.mongodb.models.QuoteDetails/0
[<smpl.ordering.repositories.mongodb.MongoQuoteRepository: smpl.ordering.models.Quote createQuote(smpl.ordering.models.Quote)>/new smpl.ordering.repositories.mongodb.models.QuoteDetails/0]	<smpl.ordering.repositories.mongodb.models.QuoteDetails: void <init>(smpl.ordering.models.Quote)>/new smpl.ordering.models.QuoteItemInfo[]/1	<smpl.ordering.repositories.mongodb.models.QuoteDetails: smpl.ordering.models.QuoteItemInfo[] quoteItems>	[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoQuoteRepository/0]	<smpl.ordering.repositories.mongodb.MongoQuoteRepository: smpl.ordering.models.Quote createQuote(smpl.ordering.models.Quote)>/new smpl.ordering.repositories.mongodb.models.QuoteDetails/0
[<smpl.ordering.repositories.mongodb.MongoQuoteRepository: boolean updateQuote(java.lang.String,smpl.ordering.models.Quote,java.lang.String)>/new smpl.ordering.repositories.mongodb.models.QuoteDetails/0]	<smpl.ordering.repositories.mongodb.models.QuoteDetails: void <init>(smpl.ordering.models.Quote)>/new smpl.ordering.models.QuoteItemInfo[]/1	<smpl.ordering.repositories.mongodb.models.QuoteDetails: smpl.ordering.models.QuoteItemInfo[] quoteItems>	[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mongodb.MongoQuoteRepository/0]	<smpl.ordering.repositories.mongodb.MongoQuoteRepository: boolean updateQuote(java.lang.String,smpl.ordering.models.Quote,java.lang.String)>/new smpl.ordering.repositories.mongodb.models.QuoteDetails/0
[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockOrderRepository/0]	<smpl.ordering.repositories.mock.MockOrderRepository: void <init>(smpl.ordering.repositories.QuoteRepository)>/new java.util.ArrayList/0	<smpl.ordering.repositories.mock.MockOrderRepository: java.util.List orders>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockOrderRepository/0
[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockOrderRepository/0]	<smpl.ordering.repositories.mock.MockOrderRepository: void <init>(smpl.ordering.repositories.QuoteRepository)>/new java.util.ArrayList/0	<smpl.ordering.repositories.mock.MockOrderRepository: java.util.List orders>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockOrderRepository/0
[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockOrderRepository/0]	<smpl.ordering.repositories.mock.MockOrderRepository: void <init>(smpl.ordering.repositories.QuoteRepository)>/new java.util.ArrayList/0	<smpl.ordering.repositories.mock.MockOrderRepository: java.util.List orders>	[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockOrderRepository/0
[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockQuoteRepository/0	<smpl.ordering.repositories.mock.MockOrderRepository: smpl.ordering.repositories.QuoteRepository quotes>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockOrderRepository/0
[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockQuoteRepository/0	<smpl.ordering.repositories.mock.MockOrderRepository: smpl.ordering.repositories.QuoteRepository quotes>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockOrderRepository/0
[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockQuoteRepository/0	<smpl.ordering.repositories.mock.MockOrderRepository: smpl.ordering.repositories.QuoteRepository quotes>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockOrderRepository/0
[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockQuoteRepository/0	<smpl.ordering.repositories.mock.MockOrderRepository: smpl.ordering.repositories.QuoteRepository quotes>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockOrderRepository/0
[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockQuoteRepository/0	<smpl.ordering.repositories.mock.MockOrderRepository: smpl.ordering.repositories.QuoteRepository quotes>	[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockOrderRepository/0
[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockShipmentRepository/0]	<smpl.ordering.repositories.mock.MockShipmentRepository: void <init>(smpl.ordering.repositories.OrderRepository)>/new java.util.ArrayList/0	<smpl.ordering.repositories.mock.MockShipmentRepository: java.util.List records>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockShipmentRepository/0
[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockShipmentRepository/0]	<smpl.ordering.repositories.mock.MockShipmentRepository: void <init>(smpl.ordering.repositories.OrderRepository)>/new java.util.ArrayList/0	<smpl.ordering.repositories.mock.MockShipmentRepository: java.util.List records>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockShipmentRepository/0
[<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockShipmentRepository/0]	<smpl.ordering.repositories.mock.MockShipmentRepository: void <init>(smpl.ordering.repositories.OrderRepository)>/new java.util.ArrayList/0	<smpl.ordering.repositories.mock.MockShipmentRepository: java.util.List records>	[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockShipmentRepository/0
[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockOrderRepository/0	<smpl.ordering.repositories.mock.MockShipmentRepository: smpl.ordering.repositories.OrderRepository orders>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockShipmentRepository/0
[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockOrderRepository/0	<smpl.ordering.repositories.mock.MockShipmentRepository: smpl.ordering.repositories.OrderRepository orders>	[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockShipmentRepository/0
[<<immutable-context>>]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockOrderRepository/0	<smpl.ordering.repositories.mock.MockShipmentRepository: smpl.ordering.repositories.OrderRepository orders>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockShipmentRepository/0
[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockOrderRepository/0	<smpl.ordering.repositories.mock.MockShipmentRepository: smpl.ordering.repositories.OrderRepository orders>	[smpl.ordering.repositories.RepositoryFactory::MockObject]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockShipmentRepository/0
[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockOrderRepository/0	<smpl.ordering.repositories.mock.MockShipmentRepository: smpl.ordering.repositories.OrderRepository orders>	[<smpl.ordering.repositories.RepositoryFactory: void reset(java.lang.String)>/new smpl.ordering.repositories.RepositoryFactory/0]	<smpl.ordering.repositories.RepositoryFactory: void init(java.lang.String)>/new smpl.ordering.repositories.mock.MockShipmentRepository/0
